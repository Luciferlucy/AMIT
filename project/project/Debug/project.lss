
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  000008a8  0000093c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000e0  008000e0  000009bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b7  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c68  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002084  00000000  00000000  0000304f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  000050d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008388  00000000  00000000  0000562c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca7  00000000  00000000  0000d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000e65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000033c1  00000000  00000000  0000e7e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	f4 c0       	rjmp	.+488    	; 0x1ee <__vector_1>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__vector_2>
   a:	00 00       	nop
   c:	3e c1       	rjmp	.+636    	; 0x28a <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	ad c2       	rjmp	.+1370   	; 0x580 <__vector_9>
  26:	00 00       	nop
  28:	66 c2       	rjmp	.+1228   	; 0x4f6 <__vector_10>
  2a:	00 00       	nop
  2c:	3d c2       	rjmp	.+1146   	; 0x4a8 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3f       	cpi	r26, 0xF2	; 242
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	b8 d1       	rcall	.+880    	; 0x3f8 <main>
  88:	0d c4       	rjmp	.+2074   	; 0x8a4 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <adc_init>:
#include "ADC.h"

void adc_init(void){
	
#if ADC_Enable == ENABLED
    SET_BiT(ADC_ADCSRA,ADC_ADEN); //enable ADC
  8c:	37 9a       	sbi	0x06, 7	; 6
	//selection for the power form
	#if ADC_SOURCE == ADC_SOURCE_AREF
	    CLR_Bit(ADC_ADMUX,ADC_REFS1);
  8e:	3f 98       	cbi	0x07, 7	; 7
	    CLR_Bit(ADC_ADMUX,ADC_REFS0);
  90:	3e 98       	cbi	0x07, 6	; 7
	      SET_BiT(ADC_ADMUX,ADC_REFS1);
	      SET_BiT(ADC_ADMUX,ADC_REFS0);
    #endif
	//SET PRESCALLER DIVISION BY FCLK/128
	#if PRESCALLER ==  DIV_FACT_2P
	    ADC_ADCSRA = (ADC_ADCSRA & 0b11111000) | DIV_FACT_2P ;
  92:	86 b1       	in	r24, 0x06	; 6
  94:	88 7f       	andi	r24, 0xF8	; 248
  96:	86 b9       	out	0x06, r24	; 6
  98:	08 95       	ret

0000009a <ADC_READ>:
	#endif
#endif

}
TU16 ADC_READ (TU08 channel){
	if (channel ==1){
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	21 f4       	brne	.+8      	; 0xa6 <ADC_READ+0xc>
		//adc1
		ADC_ADMUX = (ADC_ADMUX & 0b11100000) | channel;
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	80 7e       	andi	r24, 0xE0	; 224
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	87 b9       	out	0x07, r24	; 7
	}
	SET_BiT(ADC_ADCSRA,ADC_ADSC); //START CONVERSION
  a6:	36 9a       	sbi	0x06, 6	; 6
	while(GET_Bit(ADC_ADCSRA,ADC_ADIF)==0); // wait for conversion to finish
  a8:	34 9b       	sbis	0x06, 4	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <ADC_READ+0xe>
	SET_BiT(ADC_ADCSRA,ADC_ADIF);
  ac:	34 9a       	sbi	0x06, 4	; 6
	return ADC_HL;
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	08 95       	ret

000000b4 <DIREC>:
	{D,PiN6,HIGH,OUT},
	{D,PiN7,HIGH,OUT},
};


void DIREC (void){
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	20 ee       	ldi	r18, 0xE0	; 224
  ba:	30 e0       	ldi	r19, 0x00	; 0
			}
		}else if (pins[i].PORT==D){
			if(pins[i].O == OUT){
				SET_BiT(DIO_DDRD,pins[i].P);
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	70 e0       	ldi	r23, 0x00	; 0
void DIREC (void){
	TU08 count =0;
	count= sizeof(pins) / (sizeof pins[0]);
	TU08 i;
	for(i=0;i<count;i++){
		if(pins[i].PORT==A){
  c0:	80 81       	ld	r24, Z
  c2:	81 11       	cpse	r24, r1
  c4:	1b c0       	rjmp	.+54     	; 0xfc <DIREC+0x48>
			if(pins[i].O == OUT){
  c6:	83 81       	ldd	r24, Z+3	; 0x03
  c8:	81 11       	cpse	r24, r1
  ca:	0b c0       	rjmp	.+22     	; 0xe2 <DIREC+0x2e>
			SET_BiT(DIO_DDRA,pins[i].P);
  cc:	4a b3       	in	r20, 0x1a	; 26
  ce:	cb 01       	movw	r24, r22
  d0:	01 80       	ldd	r0, Z+1	; 0x01
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIREC+0x24>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIREC+0x20>
  dc:	84 2b       	or	r24, r20
  de:	8a bb       	out	0x1a, r24	; 26
  e0:	63 c0       	rjmp	.+198    	; 0x1a8 <DIREC+0xf4>
			}else{
			CLR_Bit(DIO_DDRA,pins[i].P);	
  e2:	9a b3       	in	r25, 0x1a	; 26
  e4:	ab 01       	movw	r20, r22
  e6:	01 80       	ldd	r0, Z+1	; 0x01
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIREC+0x3a>
  ea:	44 0f       	add	r20, r20
  ec:	55 1f       	adc	r21, r21
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIREC+0x36>
  f2:	84 2f       	mov	r24, r20
  f4:	80 95       	com	r24
  f6:	89 23       	and	r24, r25
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	56 c0       	rjmp	.+172    	; 0x1a8 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==B){
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	d9 f4       	brne	.+54     	; 0x136 <DIREC+0x82>
			if(pins[i].O == OUT){
 100:	83 81       	ldd	r24, Z+3	; 0x03
 102:	81 11       	cpse	r24, r1
 104:	0b c0       	rjmp	.+22     	; 0x11c <DIREC+0x68>
				SET_BiT(DIO_DDRB,pins[i].P);
 106:	47 b3       	in	r20, 0x17	; 23
 108:	cb 01       	movw	r24, r22
 10a:	01 80       	ldd	r0, Z+1	; 0x01
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIREC+0x5e>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIREC+0x5a>
 116:	84 2b       	or	r24, r20
 118:	87 bb       	out	0x17, r24	; 23
 11a:	46 c0       	rjmp	.+140    	; 0x1a8 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRB,pins[i].P);
 11c:	97 b3       	in	r25, 0x17	; 23
 11e:	ab 01       	movw	r20, r22
 120:	01 80       	ldd	r0, Z+1	; 0x01
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIREC+0x74>
 124:	44 0f       	add	r20, r20
 126:	55 1f       	adc	r21, r21
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIREC+0x70>
 12c:	84 2f       	mov	r24, r20
 12e:	80 95       	com	r24
 130:	89 23       	and	r24, r25
 132:	87 bb       	out	0x17, r24	; 23
 134:	39 c0       	rjmp	.+114    	; 0x1a8 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==C){
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	d9 f4       	brne	.+54     	; 0x170 <DIREC+0xbc>
			if(pins[i].O == OUT){
 13a:	83 81       	ldd	r24, Z+3	; 0x03
 13c:	81 11       	cpse	r24, r1
 13e:	0b c0       	rjmp	.+22     	; 0x156 <DIREC+0xa2>
				SET_BiT(DIO_DDRC,pins[i].P);
 140:	44 b3       	in	r20, 0x14	; 20
 142:	cb 01       	movw	r24, r22
 144:	01 80       	ldd	r0, Z+1	; 0x01
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIREC+0x98>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIREC+0x94>
 150:	84 2b       	or	r24, r20
 152:	84 bb       	out	0x14, r24	; 20
 154:	29 c0       	rjmp	.+82     	; 0x1a8 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRC,pins[i].P);
 156:	94 b3       	in	r25, 0x14	; 20
 158:	ab 01       	movw	r20, r22
 15a:	01 80       	ldd	r0, Z+1	; 0x01
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIREC+0xae>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIREC+0xaa>
 166:	84 2f       	mov	r24, r20
 168:	80 95       	com	r24
 16a:	89 23       	and	r24, r25
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	1c c0       	rjmp	.+56     	; 0x1a8 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==D){
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	d1 f4       	brne	.+52     	; 0x1a8 <DIREC+0xf4>
			if(pins[i].O == OUT){
 174:	83 81       	ldd	r24, Z+3	; 0x03
 176:	81 11       	cpse	r24, r1
 178:	0b c0       	rjmp	.+22     	; 0x190 <DIREC+0xdc>
				SET_BiT(DIO_DDRD,pins[i].P);
 17a:	41 b3       	in	r20, 0x11	; 17
 17c:	cb 01       	movw	r24, r22
 17e:	01 80       	ldd	r0, Z+1	; 0x01
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIREC+0xd2>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIREC+0xce>
 18a:	84 2b       	or	r24, r20
 18c:	81 bb       	out	0x11, r24	; 17
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
 190:	91 b3       	in	r25, 0x11	; 17
 192:	ab 01       	movw	r20, r22
 194:	01 80       	ldd	r0, Z+1	; 0x01
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIREC+0xe8>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIREC+0xe4>
 1a0:	84 2f       	mov	r24, r20
 1a2:	80 95       	com	r24
 1a4:	89 23       	and	r24, r25
 1a6:	81 bb       	out	0x11, r24	; 17
 1a8:	34 96       	adiw	r30, 0x04	; 4

void DIREC (void){
	TU08 count =0;
	count= sizeof(pins) / (sizeof pins[0]);
	TU08 i;
	for(i=0;i<count;i++){
 1aa:	e2 17       	cp	r30, r18
 1ac:	f3 07       	cpc	r31, r19
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <DIREC+0xfe>
 1b0:	87 cf       	rjmp	.-242    	; 0xc0 <DIREC+0xc>
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
			}
		}
	}
}
 1b2:	08 95       	ret

000001b4 <DCMOTOR_Init>:
 * Created: 11/29/2021 7:11:32 PM
 *  Author: Mina
 */ 
#include "DC_Motor.h"
void DCMOTOR_Init (void){
	SET_BiT(DIO_DDRC,3);
 1b4:	a3 9a       	sbi	0x14, 3	; 20
	SET_BiT(DIO_DDRC,4);
 1b6:	a4 9a       	sbi	0x14, 4	; 20
	PWM0_Init();
 1b8:	c5 c1       	rjmp	.+906    	; 0x544 <PWM0_Init>
 1ba:	08 95       	ret

000001bc <DCMOTOR_SEtDIR>:
}
void DCMOTOR_SEtDIR(DCMOTOR_DIR dir){
	#if dir == DIR_CLOCK_WISE
	C3_OUTPUT;
 1bc:	ab 9a       	sbi	0x15, 3	; 21
	C4_CLEAR;
 1be:	ac 98       	cbi	0x15, 4	; 21
 1c0:	08 95       	ret

000001c2 <DCMOTOR_SETSPEED>:
	C4_OUTPUT;
	#endif
}
void DCMOTOR_SETSPEED(TU08 sped){
	 sped *=10;
	 PWM0_GEN(sped);
 1c2:	88 0f       	add	r24, r24
 1c4:	98 2f       	mov	r25, r24
 1c6:	99 0f       	add	r25, r25
 1c8:	99 0f       	add	r25, r25
 1ca:	89 0f       	add	r24, r25
 1cc:	c0 c1       	rjmp	.+896    	; 0x54e <PWM0_GEN>
 1ce:	08 95       	ret

000001d0 <DCMOTOR_Start>:
	
}
void DCMOTOR_Start(void){
	PWM0_Start ();
 1d0:	c6 c1       	rjmp	.+908    	; 0x55e <PWM0_Start>
 1d2:	08 95       	ret

000001d4 <init_interrrupt>:
}
void SET_CallBack_INT1 (void (*p2func)(void)){
	p2f1 = p2func;
}
void SET_CallBack_INT2 (void (*p2func)(void)){
	p2f2 = p2func;
 1d4:	8b b7       	in	r24, 0x3b	; 59
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	8b bf       	out	0x3b, r24	; 59
 1da:	85 b7       	in	r24, 0x35	; 53
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	85 bf       	out	0x35, r24	; 53
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	85 bf       	out	0x35, r24	; 53
 1e6:	8f b7       	in	r24, 0x3f	; 63
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	8f bf       	out	0x3f, r24	; 63
 1ec:	08 95       	ret

000001ee <__vector_1>:
}
/////////////////////////////////////////////////
ISR(INT0_vect){
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	p2f0();	
 210:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <p2f0>
 214:	f0 91 e3 00 	lds	r31, 0x00E3	; 0x8000e3 <p2f0+0x1>
 218:	09 95       	icall
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_2>:
ISR(INT1_vect){
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
    p2f1();
 25e:	e0 91 e4 00 	lds	r30, 0x00E4	; 0x8000e4 <p2f1>
 262:	f0 91 e5 00 	lds	r31, 0x00E5	; 0x8000e5 <p2f1+0x1>
 266:	09 95       	icall
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_3>:
ISR(INT2_vect){
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
    p2f2();
 2ac:	e0 91 e6 00 	lds	r30, 0x00E6	; 0x8000e6 <p2f2>
 2b0:	f0 91 e7 00 	lds	r31, 0x00E7	; 0x8000e7 <p2f2+0x1>
 2b4:	09 95       	icall
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <LCD_char>:
	_delay_ms(100);
	
	_delay_ms(5);
	//////////////////////////////////////////////
	#elif LCD_MODE == 4 
	SET_BiT(DIO_PORTB,LCD_RS);
 2d8:	c1 9a       	sbi	0x18, 1	; 24
	CLR_Bit(DIO_PORTB,LCD_RW);
 2da:	c2 98       	cbi	0x18, 2	; 24
	CLR_Bit(DIO_PORTB,LCD_EN);
 2dc:	c3 98       	cbi	0x18, 3	; 24
	
	DIO_PORTA = (data & 0xF0) | (DIO_PORTA & 0x0F);
 2de:	9b b3       	in	r25, 0x1b	; 27
 2e0:	28 2f       	mov	r18, r24
 2e2:	20 7f       	andi	r18, 0xF0	; 240
 2e4:	9f 70       	andi	r25, 0x0F	; 15
 2e6:	92 2b       	or	r25, r18
 2e8:	9b bb       	out	0x1b, r25	; 27
	SET_BiT(DIO_PORTB,LCD_EN);
 2ea:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	e3 ec       	ldi	r30, 0xC3	; 195
 2ee:	f9 e0       	ldi	r31, 0x09	; 9
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_char+0x18>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_char+0x1e>
 2f6:	00 00       	nop
	_delay_ms(10);
	CLR_Bit(DIO_PORTB,LCD_EN);
 2f8:	c3 98       	cbi	0x18, 3	; 24
 2fa:	e7 ea       	ldi	r30, 0xA7	; 167
 2fc:	f1 e6       	ldi	r31, 0x61	; 97
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_char+0x26>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_char+0x2c>
 304:	00 00       	nop
	_delay_ms(100);
	
	DIO_PORTA = (data << 4) | (DIO_PORTA & 0x0F);
 306:	2b b3       	in	r18, 0x1b	; 27
 308:	f0 e1       	ldi	r31, 0x10	; 16
 30a:	8f 02       	muls	r24, r31
 30c:	c0 01       	movw	r24, r0
 30e:	11 24       	eor	r1, r1
 310:	92 2f       	mov	r25, r18
 312:	9f 70       	andi	r25, 0x0F	; 15
 314:	89 2b       	or	r24, r25
 316:	8b bb       	out	0x1b, r24	; 27
	SET_BiT(DIO_PORTB,LCD_EN);
 318:	c3 9a       	sbi	0x18, 3	; 24
 31a:	83 ec       	ldi	r24, 0xC3	; 195
 31c:	99 e0       	ldi	r25, 0x09	; 9
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_char+0x46>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_char+0x4c>
 324:	00 00       	nop
	_delay_ms(10);
	CLR_Bit(DIO_PORTB,LCD_EN);
 326:	c3 98       	cbi	0x18, 3	; 24
 328:	e7 ea       	ldi	r30, 0xA7	; 167
 32a:	f1 e6       	ldi	r31, 0x61	; 97
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_char+0x54>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_char+0x5a>
 332:	00 00       	nop
 334:	81 ee       	ldi	r24, 0xE1	; 225
 336:	94 e0       	ldi	r25, 0x04	; 4
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <LCD_char+0x60>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <LCD_char+0x66>
 33e:	00 00       	nop
 340:	08 95       	ret

00000342 <LCD_command>:
	_delay_ms(100);
	
	_delay_ms(6);
	//////////////////////////////////////////////
	#elif LCD_MODE == 4
	CLR_Bit(DIO_PORTB,LCD_RS);
 342:	c1 98       	cbi	0x18, 1	; 24
	CLR_Bit(DIO_PORTB,LCD_RW);
 344:	c2 98       	cbi	0x18, 2	; 24
	CLR_Bit(DIO_PORTB,LCD_EN);
 346:	c3 98       	cbi	0x18, 3	; 24
	
	DIO_PORTA = (cmd & 0xF0) | (DIO_PORTA & 0x0F);
 348:	9b b3       	in	r25, 0x1b	; 27
 34a:	28 2f       	mov	r18, r24
 34c:	20 7f       	andi	r18, 0xF0	; 240
 34e:	9f 70       	andi	r25, 0x0F	; 15
 350:	92 2b       	or	r25, r18
 352:	9b bb       	out	0x1b, r25	; 27
	SET_BiT(DIO_PORTB,LCD_EN);
 354:	c3 9a       	sbi	0x18, 3	; 24
 356:	e3 ec       	ldi	r30, 0xC3	; 195
 358:	f9 e0       	ldi	r31, 0x09	; 9
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_command+0x18>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_command+0x1e>
 360:	00 00       	nop
	_delay_ms(10);
	CLR_Bit(DIO_PORTB,LCD_EN);
 362:	c3 98       	cbi	0x18, 3	; 24
 364:	e7 ea       	ldi	r30, 0xA7	; 167
 366:	f1 e6       	ldi	r31, 0x61	; 97
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_command+0x26>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_command+0x2c>
 36e:	00 00       	nop
	_delay_ms(100);
	
	DIO_PORTA = (cmd << 4) | (DIO_PORTA & 0x0F);
 370:	2b b3       	in	r18, 0x1b	; 27
 372:	f0 e1       	ldi	r31, 0x10	; 16
 374:	8f 02       	muls	r24, r31
 376:	c0 01       	movw	r24, r0
 378:	11 24       	eor	r1, r1
 37a:	92 2f       	mov	r25, r18
 37c:	9f 70       	andi	r25, 0x0F	; 15
 37e:	89 2b       	or	r24, r25
 380:	8b bb       	out	0x1b, r24	; 27
	SET_BiT(DIO_PORTB,LCD_EN);
 382:	c3 9a       	sbi	0x18, 3	; 24
 384:	83 ec       	ldi	r24, 0xC3	; 195
 386:	99 e0       	ldi	r25, 0x09	; 9
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_command+0x46>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_command+0x4c>
 38e:	00 00       	nop
	_delay_ms(10);
	CLR_Bit(DIO_PORTB,LCD_EN);
 390:	c3 98       	cbi	0x18, 3	; 24
 392:	e7 ea       	ldi	r30, 0xA7	; 167
 394:	f1 e6       	ldi	r31, 0x61	; 97
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <LCD_command+0x54>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_command+0x5a>
 39c:	00 00       	nop
 39e:	81 ee       	ldi	r24, 0xE1	; 225
 3a0:	94 e0       	ldi	r25, 0x04	; 4
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_command+0x60>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_command+0x66>
 3a8:	00 00       	nop
 3aa:	08 95       	ret

000003ac <LCD_init>:
		 LCD_command(0x01);
		 LCD_command(0x06);
		 LCD_command(0x02);
//////////////////////////////////////////////////////	 
	#elif LCD_MODE == 4
	    SET_BiT(DIO_DDRB,LCD_RW);
 3ac:	ba 9a       	sbi	0x17, 2	; 23
		SET_BiT(DIO_DDRB,LCD_RS);
 3ae:	b9 9a       	sbi	0x17, 1	; 23
	    SET_BiT(DIO_DDRB,LCD_EN);
 3b0:	bb 9a       	sbi	0x17, 3	; 23
		SET_BiT(DIO_DDRA,LCD_A4);
 3b2:	d4 9a       	sbi	0x1a, 4	; 26
		SET_BiT(DIO_DDRA,LCD_A5);
 3b4:	d5 9a       	sbi	0x1a, 5	; 26
		SET_BiT(DIO_DDRA,LCD_A6);
 3b6:	d6 9a       	sbi	0x1a, 6	; 26
	    SET_BiT(DIO_DDRA,LCD_A7);
 3b8:	d7 9a       	sbi	0x1a, 7	; 26
 3ba:	87 ea       	ldi	r24, 0xA7	; 167
 3bc:	91 e6       	ldi	r25, 0x61	; 97
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_init+0x12>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_init+0x18>
 3c4:	00 00       	nop
		
		_delay_ms(100);
		 LCD_command(0x33);
 3c6:	83 e3       	ldi	r24, 0x33	; 51
 3c8:	bc df       	rcall	.-136    	; 0x342 <LCD_command>
		 LCD_command(0x32);
 3ca:	82 e3       	ldi	r24, 0x32	; 50
 3cc:	ba df       	rcall	.-140    	; 0x342 <LCD_command>
		 LCD_command(0x28);
 3ce:	88 e2       	ldi	r24, 0x28	; 40
 3d0:	b8 df       	rcall	.-144    	; 0x342 <LCD_command>
		 
		 LCD_command(0x0C);
 3d2:	8c e0       	ldi	r24, 0x0C	; 12
 3d4:	b6 df       	rcall	.-148    	; 0x342 <LCD_command>
		 LCD_command(0x01);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	b4 df       	rcall	.-152    	; 0x342 <LCD_command>
		 LCD_command(0x06);
 3da:	86 e0       	ldi	r24, 0x06	; 6
 3dc:	b2 df       	rcall	.-156    	; 0x342 <LCD_command>
 3de:	82 e0       	ldi	r24, 0x02	; 2
		 LCD_command(0x02);
 3e0:	b0 cf       	rjmp	.-160    	; 0x342 <LCD_command>
 3e2:	08 95       	ret

000003e4 <test2>:
 3e4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
	//SET_BiT(PORTC,2);
}
void test1(){
	C2_OUTPUT;	
	_delay_ms(1000);
	C2_CLEAR;
 3e8:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__data_end+0x1>
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <__data_end+0x1>
 3f2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
 3f6:	08 95       	ret

000003f8 <main>:
}
int main(void)
{
	init_interrrupt();
 3f8:	ed de       	rcall	.-550    	; 0x1d4 <init_interrrupt>
	SETCALLBACK_TIMER1_OVR(test2);
 3fa:	82 ef       	ldi	r24, 0xF2	; 242
 3fc:	91 e0       	ldi	r25, 0x01	; 1
	DCMOTOR_Init();
 3fe:	3d d0       	rcall	.+122    	; 0x47a <SETCALLBACK_TIMER1_OVR>
	DCMOTOR_SEtDIR(DIR_CLOCK_WISE);
 400:	d9 de       	rcall	.-590    	; 0x1b4 <DCMOTOR_Init>
	DCMOTOR_SETSPEED(1);
 402:	80 e0       	ldi	r24, 0x00	; 0
	////////////////////////////////
	
	//SETCALLBACK_TIMER0_OCR (test2);
    //SET_CallBack_INT0 (test1);
	timer_init();
 404:	db de       	rcall	.-586    	; 0x1bc <DCMOTOR_SEtDIR>
	//timer_OCR(255);
	//DIREC();
	UART_Init();
 406:	81 e0       	ldi	r24, 0x01	; 1
	adc_init();
 408:	dc de       	rcall	.-584    	; 0x1c2 <DCMOTOR_SETSPEED>
	UART_Rx();
 40a:	3c d0       	rcall	.+120    	; 0x484 <timer_init>
 40c:	e0 d0       	rcall	.+448    	; 0x5ce <UART_Init>
    ADC_READ(1);
 40e:	3e de       	rcall	.-900    	; 0x8c <adc_init>
 410:	f7 d0       	rcall	.+494    	; 0x600 <UART_Rx>
 412:	81 e0       	ldi	r24, 0x01	; 1
	
	LCD_init();
 414:	42 de       	rcall	.-892    	; 0x9a <ADC_READ>
 416:	ca df       	rcall	.-108    	; 0x3ac <LCD_init>
	LCD_char('C');	
 418:	83 e4       	ldi	r24, 0x43	; 67
 41a:	5e df       	rcall	.-324    	; 0x2d8 <LCD_char>
 41c:	a4 d0       	rcall	.+328    	; 0x566 <timer1_init>
    while (1) 
    {
		timer1_init();
 41e:	08 b6       	in	r0, 0x38	; 56
 420:	05 fe       	sbrs	r0, 5
		while ((TIM_TIFR & (1 << TIM_ICF1)) == 0);/* Wait for falling edge */
 422:	fd cf       	rjmp	.-6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 424:	27 b5       	in	r18, 0x27	; 39
 426:	66 b5       	in	r22, 0x26	; 38
		toff = TIM_ICR1_H+TIM_ICR1_L + (65535 * cou);	/* Take count */
 428:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 42c:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__data_end+0x1>
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	62 0f       	add	r22, r18
 434:	71 1d       	adc	r23, r1
 436:	68 1b       	sub	r22, r24
 438:	79 0b       	sbc	r23, r25
 43a:	70 93 e9 00 	sts	0x00E9, r23	; 0x8000e9 <toff+0x1>
 43e:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <toff>
		/* 8MHz Timer freq, sound speed =343 m/s */
		ton = (double)toff / 466.47;
 442:	07 2e       	mov	r0, r23
 444:	00 0c       	add	r0, r0
 446:	88 0b       	sbc	r24, r24
 448:	99 0b       	sbc	r25, r25
 44a:	79 d1       	rcall	.+754    	; 0x73e <__floatsisf>
 44c:	29 e2       	ldi	r18, 0x29	; 41
 44e:	3c e3       	ldi	r19, 0x3C	; 60
 450:	49 ee       	ldi	r20, 0xE9	; 233
 452:	53 e4       	ldi	r21, 0x43	; 67
 454:	d9 d0       	rcall	.+434    	; 0x608 <__divsf3>
 456:	40 d1       	rcall	.+640    	; 0x6d8 <__fixsfsi>
 458:	70 93 eb 00 	sts	0x00EB, r23	; 0x8000eb <ton+0x1>
 45c:	60 93 ea 00 	sts	0x00EA, r22	; 0x8000ea <ton>
	    DCMOTOR_Start();
 460:	b7 de       	rcall	.-658    	; 0x1d0 <DCMOTOR_Start>
		if (ton > 6){
 462:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <ton>
 466:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <ton+0x1>
 46a:	07 97       	sbiw	r24, 0x07	; 7
 46c:	1c f0       	brlt	.+6      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
		    DCMOTOR_SETSPEED(20);
 46e:	84 e1       	ldi	r24, 0x14	; 20
 470:	a8 de       	rcall	.-688    	; 0x1c2 <DCMOTOR_SETSPEED>
 472:	d4 cf       	rjmp	.-88     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 474:	8a e0       	ldi	r24, 0x0A	; 10
		}else if (ton >4 || ton <6){
			DCMOTOR_SETSPEED(10);
 476:	a5 de       	rcall	.-694    	; 0x1c2 <DCMOTOR_SETSPEED>
 478:	d1 cf       	rjmp	.-94     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>

0000047a <SETCALLBACK_TIMER1_OVR>:
 47a:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <p4f+0x1>
    CLR_Bit(TIM_TIMSK,TIM_TOIE0);
    SET_BiT(TIM_TIMSK,TIM_OCIE0);
#endif
}
void timer_OCR(TU08 ocr_val){
	TIM_OCR0 = ocr_val;
 47e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <p4f>
 482:	08 95       	ret

00000484 <timer_init>:
 484:	12 be       	out	0x32, r1	; 50
 486:	83 b7       	in	r24, 0x33	; 51
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	83 bf       	out	0x33, r24	; 51
 48c:	83 b7       	in	r24, 0x33	; 51
 48e:	88 60       	ori	r24, 0x08	; 8
 490:	83 bf       	out	0x33, r24	; 51
 492:	83 b7       	in	r24, 0x33	; 51
 494:	88 7f       	andi	r24, 0xF8	; 248
 496:	82 60       	ori	r24, 0x02	; 2
 498:	83 bf       	out	0x33, r24	; 51
 49a:	89 b7       	in	r24, 0x39	; 57
 49c:	81 60       	ori	r24, 0x01	; 1
 49e:	89 bf       	out	0x39, r24	; 57
 4a0:	89 b7       	in	r24, 0x39	; 57
 4a2:	8d 7f       	andi	r24, 0xFD	; 253
 4a4:	89 bf       	out	0x39, r24	; 57
 4a6:	08 95       	ret

000004a8 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	2f 93       	push	r18
 4b4:	3f 93       	push	r19
 4b6:	4f 93       	push	r20
 4b8:	5f 93       	push	r21
 4ba:	6f 93       	push	r22
 4bc:	7f 93       	push	r23
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
 4c2:	af 93       	push	r26
 4c4:	bf 93       	push	r27
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
	p2f();
 4ca:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <p2f>
 4ce:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <p2f+0x1>
 4d2:	09 95       	icall
	
}
 4d4:	ff 91       	pop	r31
 4d6:	ef 91       	pop	r30
 4d8:	bf 91       	pop	r27
 4da:	af 91       	pop	r26
 4dc:	9f 91       	pop	r25
 4de:	8f 91       	pop	r24
 4e0:	7f 91       	pop	r23
 4e2:	6f 91       	pop	r22
 4e4:	5f 91       	pop	r21
 4e6:	4f 91       	pop	r20
 4e8:	3f 91       	pop	r19
 4ea:	2f 91       	pop	r18
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <__vector_10>:
ISR(TIMER0_COMP_vect){
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	0f 92       	push	r0
 4fe:	11 24       	eor	r1, r1
 500:	2f 93       	push	r18
 502:	3f 93       	push	r19
 504:	4f 93       	push	r20
 506:	5f 93       	push	r21
 508:	6f 93       	push	r22
 50a:	7f 93       	push	r23
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	af 93       	push	r26
 512:	bf 93       	push	r27
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
	p3f();
 518:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <p3f>
 51c:	f0 91 ed 00 	lds	r31, 0x00ED	; 0x8000ed <p3f+0x1>
 520:	09 95       	icall
}
 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	7f 91       	pop	r23
 530:	6f 91       	pop	r22
 532:	5f 91       	pop	r21
 534:	4f 91       	pop	r20
 536:	3f 91       	pop	r19
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <PWM0_Init>:
////////////
void PWM0_Init(void){
	DIO_DDRB |= 0x08;
 544:	bb 9a       	sbi	0x17, 3	; 23
	TIM_TCCR0 |= 0x68;
 546:	83 b7       	in	r24, 0x33	; 51
 548:	88 66       	ori	r24, 0x68	; 104
 54a:	83 bf       	out	0x33, r24	; 51
 54c:	08 95       	ret

0000054e <PWM0_GEN>:
}
void PWM0_GEN(TU08 duty){
	TIM_OCR0 = ((duty * 256)/100)-1;
 54e:	98 2f       	mov	r25, r24
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	64 e6       	ldi	r22, 0x64	; 100
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	7f d1       	rcall	.+766    	; 0x856 <__divmodhi4>
 558:	61 50       	subi	r22, 0x01	; 1
 55a:	6c bf       	out	0x3c, r22	; 60
 55c:	08 95       	ret

0000055e <PWM0_Start>:
}
void PWM0_Start (void){
	TIM_TCCR0 |=0x01;
 55e:	83 b7       	in	r24, 0x33	; 51
 560:	81 60       	ori	r24, 0x01	; 1
 562:	83 bf       	out	0x33, r24	; 51
 564:	08 95       	ret

00000566 <timer1_init>:
}
////////////
void timer1_init (void){
	TIM_TCNT1_H=0;
 566:	1d bc       	out	0x2d, r1	; 45
	TIM_TCNT1_L =0;
 568:	1c bc       	out	0x2c, r1	; 44
	TIM_TCCR1A =0;
 56a:	1f bc       	out	0x2f, r1	; 47
	SET_BiT(TIM_TIMSK,TIM_TOIE1);
 56c:	89 b7       	in	r24, 0x39	; 57
 56e:	84 60       	ori	r24, 0x04	; 4
 570:	89 bf       	out	0x39, r24	; 57
	SET_BiT(TIM_TIFR,TIM_ICF1);
 572:	88 b7       	in	r24, 0x38	; 56
 574:	80 62       	ori	r24, 0x20	; 32
 576:	88 bf       	out	0x38, r24	; 56
	SET_BiT(TIM_TIFR,TIM_TOV1);
 578:	88 b7       	in	r24, 0x38	; 56
 57a:	84 60       	ori	r24, 0x04	; 4
 57c:	88 bf       	out	0x38, r24	; 56
 57e:	08 95       	ret

00000580 <__vector_9>:
}
//////
ISR(TIMER1_OVF_vect){
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31
	p4f();
 5a2:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <p4f>
 5a6:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <p4f+0x1>
 5aa:	09 95       	icall
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <UART_Init>:
	#endif
}
void UART_Tx(TU08 data){
	UART_UDR = data;
	while(GET_Bit(UART_UCSRA,UCSRA_UDRE)==0);
}
 5ce:	72 dd       	rcall	.-1308   	; 0xb4 <DIREC>
 5d0:	54 9a       	sbi	0x0a, 4	; 10
 5d2:	53 9a       	sbi	0x0a, 3	; 10
 5d4:	80 b5       	in	r24, 0x20	; 32
 5d6:	80 68       	ori	r24, 0x80	; 128
 5d8:	80 bd       	out	0x20, r24	; 32
 5da:	80 b5       	in	r24, 0x20	; 32
 5dc:	8f 7b       	andi	r24, 0xBF	; 191
 5de:	80 bd       	out	0x20, r24	; 32
 5e0:	80 b5       	in	r24, 0x20	; 32
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	80 bd       	out	0x20, r24	; 32
 5e6:	80 b5       	in	r24, 0x20	; 32
 5e8:	8f 7d       	andi	r24, 0xDF	; 223
 5ea:	80 bd       	out	0x20, r24	; 32
 5ec:	80 b5       	in	r24, 0x20	; 32
 5ee:	8f 7e       	andi	r24, 0xEF	; 239
 5f0:	80 bd       	out	0x20, r24	; 32
 5f2:	80 b5       	in	r24, 0x20	; 32
 5f4:	87 7f       	andi	r24, 0xF7	; 247
 5f6:	80 bd       	out	0x20, r24	; 32
 5f8:	80 b5       	in	r24, 0x20	; 32
 5fa:	86 60       	ori	r24, 0x06	; 6
 5fc:	80 bd       	out	0x20, r24	; 32
 5fe:	08 95       	ret

00000600 <UART_Rx>:
//when it finish receiving
TU08 UART_Rx(void){
	while(GET_Bit(UART_UCSRA,UCSRA_RXC)==0);
 600:	5f 9b       	sbis	0x0b, 7	; 11
 602:	fe cf       	rjmp	.-4      	; 0x600 <UART_Rx>
	return UART_UDR;
 604:	8c b1       	in	r24, 0x0c	; 12
}
 606:	08 95       	ret

00000608 <__divsf3>:
 608:	0c d0       	rcall	.+24     	; 0x622 <__divsf3x>
 60a:	eb c0       	rjmp	.+470    	; 0x7e2 <__fp_round>
 60c:	e3 d0       	rcall	.+454    	; 0x7d4 <__fp_pscB>
 60e:	40 f0       	brcs	.+16     	; 0x620 <__divsf3+0x18>
 610:	da d0       	rcall	.+436    	; 0x7c6 <__fp_pscA>
 612:	30 f0       	brcs	.+12     	; 0x620 <__divsf3+0x18>
 614:	21 f4       	brne	.+8      	; 0x61e <__divsf3+0x16>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	19 f0       	breq	.+6      	; 0x620 <__divsf3+0x18>
 61a:	cc c0       	rjmp	.+408    	; 0x7b4 <__fp_inf>
 61c:	51 11       	cpse	r21, r1
 61e:	15 c1       	rjmp	.+554    	; 0x84a <__fp_szero>
 620:	cf c0       	rjmp	.+414    	; 0x7c0 <__fp_nan>

00000622 <__divsf3x>:
 622:	f0 d0       	rcall	.+480    	; 0x804 <__fp_split3>
 624:	98 f3       	brcs	.-26     	; 0x60c <__divsf3+0x4>

00000626 <__divsf3_pse>:
 626:	99 23       	and	r25, r25
 628:	c9 f3       	breq	.-14     	; 0x61c <__divsf3+0x14>
 62a:	55 23       	and	r21, r21
 62c:	b1 f3       	breq	.-20     	; 0x61a <__divsf3+0x12>
 62e:	95 1b       	sub	r25, r21
 630:	55 0b       	sbc	r21, r21
 632:	bb 27       	eor	r27, r27
 634:	aa 27       	eor	r26, r26
 636:	62 17       	cp	r22, r18
 638:	73 07       	cpc	r23, r19
 63a:	84 07       	cpc	r24, r20
 63c:	38 f0       	brcs	.+14     	; 0x64c <__divsf3_pse+0x26>
 63e:	9f 5f       	subi	r25, 0xFF	; 255
 640:	5f 4f       	sbci	r21, 0xFF	; 255
 642:	22 0f       	add	r18, r18
 644:	33 1f       	adc	r19, r19
 646:	44 1f       	adc	r20, r20
 648:	aa 1f       	adc	r26, r26
 64a:	a9 f3       	breq	.-22     	; 0x636 <__divsf3_pse+0x10>
 64c:	33 d0       	rcall	.+102    	; 0x6b4 <__divsf3_pse+0x8e>
 64e:	0e 2e       	mov	r0, r30
 650:	3a f0       	brmi	.+14     	; 0x660 <__divsf3_pse+0x3a>
 652:	e0 e8       	ldi	r30, 0x80	; 128
 654:	30 d0       	rcall	.+96     	; 0x6b6 <__divsf3_pse+0x90>
 656:	91 50       	subi	r25, 0x01	; 1
 658:	50 40       	sbci	r21, 0x00	; 0
 65a:	e6 95       	lsr	r30
 65c:	00 1c       	adc	r0, r0
 65e:	ca f7       	brpl	.-14     	; 0x652 <__divsf3_pse+0x2c>
 660:	29 d0       	rcall	.+82     	; 0x6b4 <__divsf3_pse+0x8e>
 662:	fe 2f       	mov	r31, r30
 664:	27 d0       	rcall	.+78     	; 0x6b4 <__divsf3_pse+0x8e>
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	bb 1f       	adc	r27, r27
 66e:	26 17       	cp	r18, r22
 670:	37 07       	cpc	r19, r23
 672:	48 07       	cpc	r20, r24
 674:	ab 07       	cpc	r26, r27
 676:	b0 e8       	ldi	r27, 0x80	; 128
 678:	09 f0       	breq	.+2      	; 0x67c <__divsf3_pse+0x56>
 67a:	bb 0b       	sbc	r27, r27
 67c:	80 2d       	mov	r24, r0
 67e:	bf 01       	movw	r22, r30
 680:	ff 27       	eor	r31, r31
 682:	93 58       	subi	r25, 0x83	; 131
 684:	5f 4f       	sbci	r21, 0xFF	; 255
 686:	2a f0       	brmi	.+10     	; 0x692 <__divsf3_pse+0x6c>
 688:	9e 3f       	cpi	r25, 0xFE	; 254
 68a:	51 05       	cpc	r21, r1
 68c:	68 f0       	brcs	.+26     	; 0x6a8 <__divsf3_pse+0x82>
 68e:	92 c0       	rjmp	.+292    	; 0x7b4 <__fp_inf>
 690:	dc c0       	rjmp	.+440    	; 0x84a <__fp_szero>
 692:	5f 3f       	cpi	r21, 0xFF	; 255
 694:	ec f3       	brlt	.-6      	; 0x690 <__divsf3_pse+0x6a>
 696:	98 3e       	cpi	r25, 0xE8	; 232
 698:	dc f3       	brlt	.-10     	; 0x690 <__divsf3_pse+0x6a>
 69a:	86 95       	lsr	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f7 95       	ror	r31
 6a4:	9f 5f       	subi	r25, 0xFF	; 255
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__divsf3_pse+0x74>
 6a8:	88 0f       	add	r24, r24
 6aa:	91 1d       	adc	r25, r1
 6ac:	96 95       	lsr	r25
 6ae:	87 95       	ror	r24
 6b0:	97 f9       	bld	r25, 7
 6b2:	08 95       	ret
 6b4:	e1 e0       	ldi	r30, 0x01	; 1
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	88 1f       	adc	r24, r24
 6bc:	bb 1f       	adc	r27, r27
 6be:	62 17       	cp	r22, r18
 6c0:	73 07       	cpc	r23, r19
 6c2:	84 07       	cpc	r24, r20
 6c4:	ba 07       	cpc	r27, r26
 6c6:	20 f0       	brcs	.+8      	; 0x6d0 <__divsf3_pse+0xaa>
 6c8:	62 1b       	sub	r22, r18
 6ca:	73 0b       	sbc	r23, r19
 6cc:	84 0b       	sbc	r24, r20
 6ce:	ba 0b       	sbc	r27, r26
 6d0:	ee 1f       	adc	r30, r30
 6d2:	88 f7       	brcc	.-30     	; 0x6b6 <__divsf3_pse+0x90>
 6d4:	e0 95       	com	r30
 6d6:	08 95       	ret

000006d8 <__fixsfsi>:
 6d8:	04 d0       	rcall	.+8      	; 0x6e2 <__fixunssfsi>
 6da:	68 94       	set
 6dc:	b1 11       	cpse	r27, r1
 6de:	b5 c0       	rjmp	.+362    	; 0x84a <__fp_szero>
 6e0:	08 95       	ret

000006e2 <__fixunssfsi>:
 6e2:	98 d0       	rcall	.+304    	; 0x814 <__fp_splitA>
 6e4:	88 f0       	brcs	.+34     	; 0x708 <__fixunssfsi+0x26>
 6e6:	9f 57       	subi	r25, 0x7F	; 127
 6e8:	90 f0       	brcs	.+36     	; 0x70e <__fixunssfsi+0x2c>
 6ea:	b9 2f       	mov	r27, r25
 6ec:	99 27       	eor	r25, r25
 6ee:	b7 51       	subi	r27, 0x17	; 23
 6f0:	a0 f0       	brcs	.+40     	; 0x71a <__fixunssfsi+0x38>
 6f2:	d1 f0       	breq	.+52     	; 0x728 <__fixunssfsi+0x46>
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	1a f0       	brmi	.+6      	; 0x704 <__fixunssfsi+0x22>
 6fe:	ba 95       	dec	r27
 700:	c9 f7       	brne	.-14     	; 0x6f4 <__fixunssfsi+0x12>
 702:	12 c0       	rjmp	.+36     	; 0x728 <__fixunssfsi+0x46>
 704:	b1 30       	cpi	r27, 0x01	; 1
 706:	81 f0       	breq	.+32     	; 0x728 <__fixunssfsi+0x46>
 708:	9f d0       	rcall	.+318    	; 0x848 <__fp_zero>
 70a:	b1 e0       	ldi	r27, 0x01	; 1
 70c:	08 95       	ret
 70e:	9c c0       	rjmp	.+312    	; 0x848 <__fp_zero>
 710:	67 2f       	mov	r22, r23
 712:	78 2f       	mov	r23, r24
 714:	88 27       	eor	r24, r24
 716:	b8 5f       	subi	r27, 0xF8	; 248
 718:	39 f0       	breq	.+14     	; 0x728 <__fixunssfsi+0x46>
 71a:	b9 3f       	cpi	r27, 0xF9	; 249
 71c:	cc f3       	brlt	.-14     	; 0x710 <__fixunssfsi+0x2e>
 71e:	86 95       	lsr	r24
 720:	77 95       	ror	r23
 722:	67 95       	ror	r22
 724:	b3 95       	inc	r27
 726:	d9 f7       	brne	.-10     	; 0x71e <__fixunssfsi+0x3c>
 728:	3e f4       	brtc	.+14     	; 0x738 <__fixunssfsi+0x56>
 72a:	90 95       	com	r25
 72c:	80 95       	com	r24
 72e:	70 95       	com	r23
 730:	61 95       	neg	r22
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	8f 4f       	sbci	r24, 0xFF	; 255
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	08 95       	ret

0000073a <__floatunsisf>:
 73a:	e8 94       	clt
 73c:	09 c0       	rjmp	.+18     	; 0x750 <__floatsisf+0x12>

0000073e <__floatsisf>:
 73e:	97 fb       	bst	r25, 7
 740:	3e f4       	brtc	.+14     	; 0x750 <__floatsisf+0x12>
 742:	90 95       	com	r25
 744:	80 95       	com	r24
 746:	70 95       	com	r23
 748:	61 95       	neg	r22
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	99 23       	and	r25, r25
 752:	a9 f0       	breq	.+42     	; 0x77e <__floatsisf+0x40>
 754:	f9 2f       	mov	r31, r25
 756:	96 e9       	ldi	r25, 0x96	; 150
 758:	bb 27       	eor	r27, r27
 75a:	93 95       	inc	r25
 75c:	f6 95       	lsr	r31
 75e:	87 95       	ror	r24
 760:	77 95       	ror	r23
 762:	67 95       	ror	r22
 764:	b7 95       	ror	r27
 766:	f1 11       	cpse	r31, r1
 768:	f8 cf       	rjmp	.-16     	; 0x75a <__floatsisf+0x1c>
 76a:	fa f4       	brpl	.+62     	; 0x7aa <__floatsisf+0x6c>
 76c:	bb 0f       	add	r27, r27
 76e:	11 f4       	brne	.+4      	; 0x774 <__floatsisf+0x36>
 770:	60 ff       	sbrs	r22, 0
 772:	1b c0       	rjmp	.+54     	; 0x7aa <__floatsisf+0x6c>
 774:	6f 5f       	subi	r22, 0xFF	; 255
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	8f 4f       	sbci	r24, 0xFF	; 255
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	16 c0       	rjmp	.+44     	; 0x7aa <__floatsisf+0x6c>
 77e:	88 23       	and	r24, r24
 780:	11 f0       	breq	.+4      	; 0x786 <__floatsisf+0x48>
 782:	96 e9       	ldi	r25, 0x96	; 150
 784:	11 c0       	rjmp	.+34     	; 0x7a8 <__floatsisf+0x6a>
 786:	77 23       	and	r23, r23
 788:	21 f0       	breq	.+8      	; 0x792 <__floatsisf+0x54>
 78a:	9e e8       	ldi	r25, 0x8E	; 142
 78c:	87 2f       	mov	r24, r23
 78e:	76 2f       	mov	r23, r22
 790:	05 c0       	rjmp	.+10     	; 0x79c <__floatsisf+0x5e>
 792:	66 23       	and	r22, r22
 794:	71 f0       	breq	.+28     	; 0x7b2 <__floatsisf+0x74>
 796:	96 e8       	ldi	r25, 0x86	; 134
 798:	86 2f       	mov	r24, r22
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	2a f0       	brmi	.+10     	; 0x7aa <__floatsisf+0x6c>
 7a0:	9a 95       	dec	r25
 7a2:	66 0f       	add	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	da f7       	brpl	.-10     	; 0x7a0 <__floatsisf+0x62>
 7aa:	88 0f       	add	r24, r24
 7ac:	96 95       	lsr	r25
 7ae:	87 95       	ror	r24
 7b0:	97 f9       	bld	r25, 7
 7b2:	08 95       	ret

000007b4 <__fp_inf>:
 7b4:	97 f9       	bld	r25, 7
 7b6:	9f 67       	ori	r25, 0x7F	; 127
 7b8:	80 e8       	ldi	r24, 0x80	; 128
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	08 95       	ret

000007c0 <__fp_nan>:
 7c0:	9f ef       	ldi	r25, 0xFF	; 255
 7c2:	80 ec       	ldi	r24, 0xC0	; 192
 7c4:	08 95       	ret

000007c6 <__fp_pscA>:
 7c6:	00 24       	eor	r0, r0
 7c8:	0a 94       	dec	r0
 7ca:	16 16       	cp	r1, r22
 7cc:	17 06       	cpc	r1, r23
 7ce:	18 06       	cpc	r1, r24
 7d0:	09 06       	cpc	r0, r25
 7d2:	08 95       	ret

000007d4 <__fp_pscB>:
 7d4:	00 24       	eor	r0, r0
 7d6:	0a 94       	dec	r0
 7d8:	12 16       	cp	r1, r18
 7da:	13 06       	cpc	r1, r19
 7dc:	14 06       	cpc	r1, r20
 7de:	05 06       	cpc	r0, r21
 7e0:	08 95       	ret

000007e2 <__fp_round>:
 7e2:	09 2e       	mov	r0, r25
 7e4:	03 94       	inc	r0
 7e6:	00 0c       	add	r0, r0
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__fp_round+0xc>
 7ea:	88 23       	and	r24, r24
 7ec:	52 f0       	brmi	.+20     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ee:	bb 0f       	add	r27, r27
 7f0:	40 f4       	brcc	.+16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f2:	bf 2b       	or	r27, r31
 7f4:	11 f4       	brne	.+4      	; 0x7fa <__fp_round+0x18>
 7f6:	60 ff       	sbrs	r22, 0
 7f8:	04 c0       	rjmp	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fa:	6f 5f       	subi	r22, 0xFF	; 255
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	08 95       	ret

00000804 <__fp_split3>:
 804:	57 fd       	sbrc	r21, 7
 806:	90 58       	subi	r25, 0x80	; 128
 808:	44 0f       	add	r20, r20
 80a:	55 1f       	adc	r21, r21
 80c:	59 f0       	breq	.+22     	; 0x824 <__fp_splitA+0x10>
 80e:	5f 3f       	cpi	r21, 0xFF	; 255
 810:	71 f0       	breq	.+28     	; 0x82e <__fp_splitA+0x1a>
 812:	47 95       	ror	r20

00000814 <__fp_splitA>:
 814:	88 0f       	add	r24, r24
 816:	97 fb       	bst	r25, 7
 818:	99 1f       	adc	r25, r25
 81a:	61 f0       	breq	.+24     	; 0x834 <__fp_splitA+0x20>
 81c:	9f 3f       	cpi	r25, 0xFF	; 255
 81e:	79 f0       	breq	.+30     	; 0x83e <__fp_splitA+0x2a>
 820:	87 95       	ror	r24
 822:	08 95       	ret
 824:	12 16       	cp	r1, r18
 826:	13 06       	cpc	r1, r19
 828:	14 06       	cpc	r1, r20
 82a:	55 1f       	adc	r21, r21
 82c:	f2 cf       	rjmp	.-28     	; 0x812 <__fp_split3+0xe>
 82e:	46 95       	lsr	r20
 830:	f1 df       	rcall	.-30     	; 0x814 <__fp_splitA>
 832:	08 c0       	rjmp	.+16     	; 0x844 <__fp_splitA+0x30>
 834:	16 16       	cp	r1, r22
 836:	17 06       	cpc	r1, r23
 838:	18 06       	cpc	r1, r24
 83a:	99 1f       	adc	r25, r25
 83c:	f1 cf       	rjmp	.-30     	; 0x820 <__fp_splitA+0xc>
 83e:	86 95       	lsr	r24
 840:	71 05       	cpc	r23, r1
 842:	61 05       	cpc	r22, r1
 844:	08 94       	sec
 846:	08 95       	ret

00000848 <__fp_zero>:
 848:	e8 94       	clt

0000084a <__fp_szero>:
 84a:	bb 27       	eor	r27, r27
 84c:	66 27       	eor	r22, r22
 84e:	77 27       	eor	r23, r23
 850:	cb 01       	movw	r24, r22
 852:	97 f9       	bld	r25, 7
 854:	08 95       	ret

00000856 <__divmodhi4>:
 856:	97 fb       	bst	r25, 7
 858:	07 2e       	mov	r0, r23
 85a:	16 f4       	brtc	.+4      	; 0x860 <__stack+0x1>
 85c:	00 94       	com	r0
 85e:	06 d0       	rcall	.+12     	; 0x86c <__divmodhi4_neg1>
 860:	77 fd       	sbrc	r23, 7
 862:	08 d0       	rcall	.+16     	; 0x874 <__divmodhi4_neg2>
 864:	0b d0       	rcall	.+22     	; 0x87c <__udivmodhi4>
 866:	07 fc       	sbrc	r0, 7
 868:	05 d0       	rcall	.+10     	; 0x874 <__divmodhi4_neg2>
 86a:	3e f4       	brtc	.+14     	; 0x87a <__divmodhi4_exit>

0000086c <__divmodhi4_neg1>:
 86c:	90 95       	com	r25
 86e:	81 95       	neg	r24
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__divmodhi4_neg2>:
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255

0000087a <__divmodhi4_exit>:
 87a:	08 95       	ret

0000087c <__udivmodhi4>:
 87c:	aa 1b       	sub	r26, r26
 87e:	bb 1b       	sub	r27, r27
 880:	51 e1       	ldi	r21, 0x11	; 17
 882:	07 c0       	rjmp	.+14     	; 0x892 <__udivmodhi4_ep>

00000884 <__udivmodhi4_loop>:
 884:	aa 1f       	adc	r26, r26
 886:	bb 1f       	adc	r27, r27
 888:	a6 17       	cp	r26, r22
 88a:	b7 07       	cpc	r27, r23
 88c:	10 f0       	brcs	.+4      	; 0x892 <__udivmodhi4_ep>
 88e:	a6 1b       	sub	r26, r22
 890:	b7 0b       	sbc	r27, r23

00000892 <__udivmodhi4_ep>:
 892:	88 1f       	adc	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	5a 95       	dec	r21
 898:	a9 f7       	brne	.-22     	; 0x884 <__udivmodhi4_loop>
 89a:	80 95       	com	r24
 89c:	90 95       	com	r25
 89e:	bc 01       	movw	r22, r24
 8a0:	cd 01       	movw	r24, r26
 8a2:	08 95       	ret

000008a4 <_exit>:
 8a4:	f8 94       	cli

000008a6 <__stop_program>:
 8a6:	ff cf       	rjmp	.-2      	; 0x8a6 <__stop_program>
