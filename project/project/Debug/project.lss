
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000099c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  0000099c  00000a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  008000f2  008000f2  00000ac2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001621  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1d  00000000  00000000  000022c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001796  00000000  00000000  00002dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00004574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000887e  00000000  00000000  00004984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c29  00000000  00000000  0000d202  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000de2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000b91  00000000  00000000  0000df93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	de c0       	rjmp	.+444    	; 0x1c2 <__vector_1>
   6:	00 00       	nop
   8:	03 c1       	rjmp	.+518    	; 0x210 <__vector_2>
   a:	00 00       	nop
   c:	28 c1       	rjmp	.+592    	; 0x25e <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	14 c3       	rjmp	.+1576   	; 0x64e <__vector_9>
  26:	00 00       	nop
  28:	eb c2       	rjmp	.+1494   	; 0x600 <__vector_10>
  2a:	00 00       	nop
  2c:	c2 c2       	rjmp	.+1412   	; 0x5b2 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3f       	cpi	r26, 0xF2	; 242
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 ef       	ldi	r26, 0xF2	; 242
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 33       	cpi	r26, 0x30	; 48
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	2e d2       	rcall	.+1116   	; 0x4e4 <main>
  88:	87 c4       	rjmp	.+2318   	; 0x998 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <DIREC>:
	{D,PiN6,HIGH,OUT},
	{D,PiN7,HIGH,OUT},
};


void DIREC (void){
  8c:	e0 e6       	ldi	r30, 0x60	; 96
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	20 ee       	ldi	r18, 0xE0	; 224
  92:	30 e0       	ldi	r19, 0x00	; 0
			}
		}else if (pins[i].PORT==D){
			if(pins[i].O == OUT){
				SET_BiT(DIO_DDRD,pins[i].P);
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	70 e0       	ldi	r23, 0x00	; 0
void DIREC (void){
	TU08 count =0;
	count= sizeof(pins) / (sizeof pins[0]);
	TU08 i;
	for(i=0;i<count;i++){
		if(pins[i].PORT==A){
  98:	80 81       	ld	r24, Z
  9a:	81 11       	cpse	r24, r1
  9c:	1b c0       	rjmp	.+54     	; 0xd4 <DIREC+0x48>
			if(pins[i].O == OUT){
  9e:	83 81       	ldd	r24, Z+3	; 0x03
  a0:	81 11       	cpse	r24, r1
  a2:	0b c0       	rjmp	.+22     	; 0xba <DIREC+0x2e>
			SET_BiT(DIO_DDRA,pins[i].P);
  a4:	4a b3       	in	r20, 0x1a	; 26
  a6:	cb 01       	movw	r24, r22
  a8:	01 80       	ldd	r0, Z+1	; 0x01
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIREC+0x24>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIREC+0x20>
  b4:	84 2b       	or	r24, r20
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	63 c0       	rjmp	.+198    	; 0x180 <DIREC+0xf4>
			}else{
			CLR_Bit(DIO_DDRA,pins[i].P);	
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	ab 01       	movw	r20, r22
  be:	01 80       	ldd	r0, Z+1	; 0x01
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIREC+0x3a>
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIREC+0x36>
  ca:	84 2f       	mov	r24, r20
  cc:	80 95       	com	r24
  ce:	89 23       	and	r24, r25
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	56 c0       	rjmp	.+172    	; 0x180 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==B){
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	d9 f4       	brne	.+54     	; 0x10e <DIREC+0x82>
			if(pins[i].O == OUT){
  d8:	83 81       	ldd	r24, Z+3	; 0x03
  da:	81 11       	cpse	r24, r1
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <DIREC+0x68>
				SET_BiT(DIO_DDRB,pins[i].P);
  de:	47 b3       	in	r20, 0x17	; 23
  e0:	cb 01       	movw	r24, r22
  e2:	01 80       	ldd	r0, Z+1	; 0x01
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIREC+0x5e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIREC+0x5a>
  ee:	84 2b       	or	r24, r20
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	46 c0       	rjmp	.+140    	; 0x180 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRB,pins[i].P);
  f4:	97 b3       	in	r25, 0x17	; 23
  f6:	ab 01       	movw	r20, r22
  f8:	01 80       	ldd	r0, Z+1	; 0x01
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIREC+0x74>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIREC+0x70>
 104:	84 2f       	mov	r24, r20
 106:	80 95       	com	r24
 108:	89 23       	and	r24, r25
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	39 c0       	rjmp	.+114    	; 0x180 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==C){
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	d9 f4       	brne	.+54     	; 0x148 <DIREC+0xbc>
			if(pins[i].O == OUT){
 112:	83 81       	ldd	r24, Z+3	; 0x03
 114:	81 11       	cpse	r24, r1
 116:	0b c0       	rjmp	.+22     	; 0x12e <DIREC+0xa2>
				SET_BiT(DIO_DDRC,pins[i].P);
 118:	44 b3       	in	r20, 0x14	; 20
 11a:	cb 01       	movw	r24, r22
 11c:	01 80       	ldd	r0, Z+1	; 0x01
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIREC+0x98>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIREC+0x94>
 128:	84 2b       	or	r24, r20
 12a:	84 bb       	out	0x14, r24	; 20
 12c:	29 c0       	rjmp	.+82     	; 0x180 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRC,pins[i].P);
 12e:	94 b3       	in	r25, 0x14	; 20
 130:	ab 01       	movw	r20, r22
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIREC+0xae>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIREC+0xaa>
 13e:	84 2f       	mov	r24, r20
 140:	80 95       	com	r24
 142:	89 23       	and	r24, r25
 144:	84 bb       	out	0x14, r24	; 20
 146:	1c c0       	rjmp	.+56     	; 0x180 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==D){
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	d1 f4       	brne	.+52     	; 0x180 <DIREC+0xf4>
			if(pins[i].O == OUT){
 14c:	83 81       	ldd	r24, Z+3	; 0x03
 14e:	81 11       	cpse	r24, r1
 150:	0b c0       	rjmp	.+22     	; 0x168 <DIREC+0xdc>
				SET_BiT(DIO_DDRD,pins[i].P);
 152:	41 b3       	in	r20, 0x11	; 17
 154:	cb 01       	movw	r24, r22
 156:	01 80       	ldd	r0, Z+1	; 0x01
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIREC+0xd2>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIREC+0xce>
 162:	84 2b       	or	r24, r20
 164:	81 bb       	out	0x11, r24	; 17
 166:	0c c0       	rjmp	.+24     	; 0x180 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
 168:	91 b3       	in	r25, 0x11	; 17
 16a:	ab 01       	movw	r20, r22
 16c:	01 80       	ldd	r0, Z+1	; 0x01
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIREC+0xe8>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIREC+0xe4>
 178:	84 2f       	mov	r24, r20
 17a:	80 95       	com	r24
 17c:	89 23       	and	r24, r25
 17e:	81 bb       	out	0x11, r24	; 17
 180:	34 96       	adiw	r30, 0x04	; 4

void DIREC (void){
	TU08 count =0;
	count= sizeof(pins) / (sizeof pins[0]);
	TU08 i;
	for(i=0;i<count;i++){
 182:	e2 17       	cp	r30, r18
 184:	f3 07       	cpc	r31, r19
 186:	09 f0       	breq	.+2      	; 0x18a <DIREC+0xfe>
 188:	87 cf       	rjmp	.-242    	; 0x98 <DIREC+0xc>
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
			}
		}
	}
}
 18a:	08 95       	ret

0000018c <init_interrrupt>:
}
void SET_CallBack_INT1 (void (*p2func)(void)){
	p2f1 = p2func;
}
void SET_CallBack_INT2 (void (*p2func)(void)){
	p2f2 = p2func;
 18c:	8b b7       	in	r24, 0x3b	; 59
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	8b bf       	out	0x3b, r24	; 59
 192:	85 b7       	in	r24, 0x35	; 53
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	85 bf       	out	0x35, r24	; 53
 198:	85 b7       	in	r24, 0x35	; 53
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	85 bf       	out	0x35, r24	; 53
 19e:	8b b7       	in	r24, 0x3b	; 59
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	8b bf       	out	0x3b, r24	; 59
 1a4:	85 b7       	in	r24, 0x35	; 53
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	85 bf       	out	0x35, r24	; 53
 1aa:	85 b7       	in	r24, 0x35	; 53
 1ac:	84 60       	ori	r24, 0x04	; 4
 1ae:	85 bf       	out	0x35, r24	; 53
 1b0:	8f b7       	in	r24, 0x3f	; 63
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8f bf       	out	0x3f, r24	; 63
 1b6:	08 95       	ret

000001b8 <SET_CallBack_INT0>:
 1b8:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <p2f0+0x1>
 1bc:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <p2f0>
 1c0:	08 95       	ret

000001c2 <__vector_1>:
}
/////////////////////////////////////////////////
ISR(INT0_vect){
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	p2f0();	
 1e4:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <p2f0>
 1e8:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <p2f0+0x1>
 1ec:	09 95       	icall
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_2>:
ISR(INT1_vect){
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
    p2f1();
 232:	e0 91 fa 00 	lds	r30, 0x00FA	; 0x8000fa <p2f1>
 236:	f0 91 fb 00 	lds	r31, 0x00FB	; 0x8000fb <p2f1+0x1>
 23a:	09 95       	icall
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_3>:
ISR(INT2_vect){
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
    p2f2();
 280:	e0 91 fc 00 	lds	r30, 0x00FC	; 0x8000fc <p2f2>
 284:	f0 91 fd 00 	lds	r31, 0x00FD	; 0x8000fd <p2f2+0x1>
 288:	09 95       	icall
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <lcd_send_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	98 2f       	mov	r25, r24
 2ae:	90 7f       	andi	r25, 0xF0	; 240
 2b0:	9b bb       	out	0x1b, r25	; 27
 2b2:	c1 98       	cbi	0x18, 1	; 24
 2b4:	c3 9a       	sbi	0x18, 3	; 24
 2b6:	e1 ee       	ldi	r30, 0xE1	; 225
 2b8:	f4 e0       	ldi	r31, 0x04	; 4
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_send_command+0xe>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_send_command+0x14>
 2c0:	00 00       	nop
 2c2:	c3 98       	cbi	0x18, 3	; 24
 2c4:	e1 ee       	ldi	r30, 0xE1	; 225
 2c6:	f4 e0       	ldi	r31, 0x04	; 4
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcd_send_command+0x1c>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <lcd_send_command+0x22>
 2ce:	00 00       	nop
 2d0:	f0 e1       	ldi	r31, 0x10	; 16
 2d2:	8f 9f       	mul	r24, r31
 2d4:	c0 01       	movw	r24, r0
 2d6:	11 24       	eor	r1, r1
 2d8:	8b bb       	out	0x1b, r24	; 27
 2da:	c3 9a       	sbi	0x18, 3	; 24
 2dc:	81 ee       	ldi	r24, 0xE1	; 225
 2de:	94 e0       	ldi	r25, 0x04	; 4
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_send_command+0x34>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lcd_send_command+0x3a>
 2e6:	00 00       	nop
 2e8:	c3 98       	cbi	0x18, 3	; 24
 2ea:	e1 ee       	ldi	r30, 0xE1	; 225
 2ec:	f4 e0       	ldi	r31, 0x04	; 4
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_send_command+0x42>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lcd_send_command+0x48>
 2f4:	00 00       	nop
 2f6:	08 95       	ret

000002f8 <lcd_init>:
 2f8:	80 ef       	ldi	r24, 0xF0	; 240
 2fa:	8a bb       	out	0x1a, r24	; 26
 2fc:	87 b3       	in	r24, 0x17	; 23
 2fe:	8e 60       	ori	r24, 0x0E	; 14
 300:	87 bb       	out	0x17, r24	; 23
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	8b bb       	out	0x1b, r24	; 27
 306:	c3 9a       	sbi	0x18, 3	; 24
 308:	81 ee       	ldi	r24, 0xE1	; 225
 30a:	94 e0       	ldi	r25, 0x04	; 4
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_init+0x14>
 310:	00 c0       	rjmp	.+0      	; 0x312 <lcd_init+0x1a>
 312:	00 00       	nop
 314:	c3 98       	cbi	0x18, 3	; 24
 316:	81 ee       	ldi	r24, 0xE1	; 225
 318:	94 e0       	ldi	r25, 0x04	; 4
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_init+0x22>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <lcd_init+0x28>
 320:	00 00       	nop
 322:	88 e2       	ldi	r24, 0x28	; 40
 324:	c3 df       	rcall	.-122    	; 0x2ac <lcd_send_command>
 326:	81 ee       	ldi	r24, 0xE1	; 225
 328:	94 e0       	ldi	r25, 0x04	; 4
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_init+0x32>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <lcd_init+0x38>
 330:	00 00       	nop
 332:	8f e0       	ldi	r24, 0x0F	; 15
 334:	bb df       	rcall	.-138    	; 0x2ac <lcd_send_command>
 336:	81 ee       	ldi	r24, 0xE1	; 225
 338:	94 e0       	ldi	r25, 0x04	; 4
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_init+0x42>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <lcd_init+0x48>
 340:	00 00       	nop
 342:	80 e8       	ldi	r24, 0x80	; 128
 344:	b3 cf       	rjmp	.-154    	; 0x2ac <lcd_send_command>
 346:	08 95       	ret

00000348 <lcd_write_character>:
 348:	98 2f       	mov	r25, r24
 34a:	90 7f       	andi	r25, 0xF0	; 240
 34c:	9b bb       	out	0x1b, r25	; 27
 34e:	c1 9a       	sbi	0x18, 1	; 24
 350:	c3 9a       	sbi	0x18, 3	; 24
 352:	e1 ee       	ldi	r30, 0xE1	; 225
 354:	f4 e0       	ldi	r31, 0x04	; 4
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <lcd_write_character+0xe>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <lcd_write_character+0x14>
 35c:	00 00       	nop
 35e:	c3 98       	cbi	0x18, 3	; 24
 360:	e1 ee       	ldi	r30, 0xE1	; 225
 362:	f4 e0       	ldi	r31, 0x04	; 4
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <lcd_write_character+0x1c>
 368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_write_character+0x22>
 36a:	00 00       	nop
 36c:	f0 e1       	ldi	r31, 0x10	; 16
 36e:	8f 9f       	mul	r24, r31
 370:	c0 01       	movw	r24, r0
 372:	11 24       	eor	r1, r1
 374:	8b bb       	out	0x1b, r24	; 27
 376:	c3 9a       	sbi	0x18, 3	; 24
 378:	81 ee       	ldi	r24, 0xE1	; 225
 37a:	94 e0       	ldi	r25, 0x04	; 4
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_write_character+0x34>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_write_character+0x3a>
 382:	00 00       	nop
 384:	c3 98       	cbi	0x18, 3	; 24
 386:	e1 ee       	ldi	r30, 0xE1	; 225
 388:	f4 e0       	ldi	r31, 0x04	; 4
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_write_character+0x42>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <lcd_write_character+0x48>
 390:	00 00       	nop
 392:	08 95       	ret

00000394 <lcd_write_word>:
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	ec 01       	movw	r28, r24
 39a:	88 81       	ld	r24, Y
 39c:	88 23       	and	r24, r24
 39e:	29 f0       	breq	.+10     	; 0x3aa <lcd_write_word+0x16>
 3a0:	21 96       	adiw	r28, 0x01	; 1
 3a2:	d2 df       	rcall	.-92     	; 0x348 <lcd_write_character>
 3a4:	89 91       	ld	r24, Y+
 3a6:	81 11       	cpse	r24, r1
 3a8:	fc cf       	rjmp	.-8      	; 0x3a2 <lcd_write_word+0xe>
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <lcd_goto_xy>:
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
	_delay_ms(5);
}
void lcd_goto_xy (TU08 line,TU08 pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
 3b0:	20 e4       	ldi	r18, 0x40	; 64
 3b2:	82 9f       	mul	r24, r18
 3b4:	c0 01       	movw	r24, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	86 0f       	add	r24, r22
 3bc:	77 df       	rcall	.-274    	; 0x2ac <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	8a 95       	dec	r24
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_goto_xy+0x10>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_goto_xy+0x16>
 3c6:	08 95       	ret

000003c8 <test1>:

float set_degree(int d)
{
	//OCR1A=d;
	OCR1A =160+((22*d)/9);
}
 3c8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__data_end>
 3cc:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__data_end+0x1>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <__data_end+0x1>
 3d6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__data_end>
 3da:	8b 3d       	cpi	r24, 0xDB	; 219
 3dc:	92 40       	sbci	r25, 0x02	; 2
 3de:	6c f0       	brlt	.+26     	; 0x3fa <test1+0x32>
 3e0:	12 be       	out	0x32, r1	; 50
 3e2:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <sensor_working+0x1>
 3e6:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <sensor_working>
 3ea:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <rising_edge+0x1>
 3ee:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <rising_edge>
 3f2:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__data_end+0x1>
 3f6:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__data_end>
 3fa:	08 95       	ret

000003fc <test2>:
 3fc:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <sensor_working>
 400:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <sensor_working+0x1>
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	09 f0       	breq	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	61 c0       	rjmp	.+194    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 40a:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <rising_edge>
 40e:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <rising_edge+0x1>
 412:	89 2b       	or	r24, r25
 414:	61 f4       	brne	.+24     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 416:	12 be       	out	0x32, r1	; 50
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <rising_edge+0x1>
 420:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <rising_edge>
 424:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__data_end+0x1>
 428:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__data_end>
 42c:	08 95       	ret
 42e:	22 b7       	in	r18, 0x32	; 50
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__data_end>
 438:	82 0f       	add	r24, r18
 43a:	91 1d       	adc	r25, r1
 43c:	62 ed       	ldi	r22, 0xD2	; 210
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	51 d2       	rcall	.+1186   	; 0x8e4 <__divmodhi4>
 442:	07 2e       	mov	r0, r23
 444:	00 0c       	add	r0, r0
 446:	88 0b       	sbc	r24, r24
 448:	99 0b       	sbc	r25, r25
 44a:	c0 d1       	rcall	.+896    	; 0x7cc <__floatsisf>
 44c:	60 93 fe 00 	sts	0x00FE, r22	; 0x8000fe <distance>
 450:	70 93 ff 00 	sts	0x00FF, r23	; 0x8000ff <distance+0x1>
 454:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <distance+0x2>
 458:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <distance+0x3>
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	a7 df       	rcall	.-178    	; 0x3b0 <lcd_goto_xy>
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	40 e8       	ldi	r20, 0x80	; 128
 468:	50 e4       	ldi	r21, 0x40	; 64
 46a:	60 91 fe 00 	lds	r22, 0x00FE	; 0x8000fe <distance>
 46e:	70 91 ff 00 	lds	r23, 0x00FF	; 0x8000ff <distance+0x1>
 472:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <distance+0x2>
 476:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <distance+0x3>
 47a:	10 d1       	rcall	.+544    	; 0x69c <__subsf3>
 47c:	74 d1       	rcall	.+744    	; 0x766 <__fixsfsi>
 47e:	dc 01       	movw	r26, r24
 480:	cb 01       	movw	r24, r22
 482:	4a e0       	ldi	r20, 0x0A	; 10
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	71 e0       	ldi	r23, 0x01	; 1
 488:	54 d2       	rcall	.+1192   	; 0x932 <__itoa_ncheck>
 48a:	a2 e0       	ldi	r26, 0x02	; 2
 48c:	b1 e0       	ldi	r27, 0x01	; 1
 48e:	0d 90       	ld	r0, X+
 490:	00 20       	and	r0, r0
 492:	e9 f7       	brne	.-6      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 494:	11 97       	sbiw	r26, 0x01	; 1
 496:	85 e0       	ldi	r24, 0x05	; 5
 498:	e0 ee       	ldi	r30, 0xE0	; 224
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	01 90       	ld	r0, Z+
 49e:	0d 92       	st	X+, r0
 4a0:	8a 95       	dec	r24
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	75 df       	rcall	.-278    	; 0x394 <lcd_write_word>
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	83 ef       	ldi	r24, 0xF3	; 243
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4ba:	00 00       	nop
 4bc:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__data_end+0x1>
 4c0:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__data_end>
 4c4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <rising_edge+0x1>
 4c8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <rising_edge>
 4cc:	08 95       	ret

000004ce <servo_init>:
 4ce:	8f b5       	in	r24, 0x2f	; 47
 4d0:	82 6a       	ori	r24, 0xA2	; 162
 4d2:	8f bd       	out	0x2f, r24	; 47
 4d4:	8e b5       	in	r24, 0x2e	; 46
 4d6:	8b 61       	ori	r24, 0x1B	; 27
 4d8:	8e bd       	out	0x2e, r24	; 46
 4da:	87 e8       	ldi	r24, 0x87	; 135
 4dc:	93 e1       	ldi	r25, 0x13	; 19
 4de:	97 bd       	out	0x27, r25	; 39
 4e0:	86 bd       	out	0x26, r24	; 38
 4e2:	08 95       	ret

000004e4 <main>:
		 timer_counter=0;
	 }
}
int main(void)
{
	servo_init();
 4e4:	f4 df       	rcall	.-24     	; 0x4ce <servo_init>
	lcd_init();
 4e6:	08 df       	rcall	.-496    	; 0x2f8 <lcd_init>
 4e8:	85 ee       	ldi	r24, 0xE5	; 229
	lcd_write_word("Distance is");
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	53 df       	rcall	.-346    	; 0x394 <lcd_write_word>
 4ee:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f0:	9c e9       	ldi	r25, 0x9C	; 156
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <main+0xe>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0x14>
 4f8:	00 00       	nop
	_delay_ms(10);
	init_interrrupt();
 4fa:	48 de       	rcall	.-880    	; 0x18c <init_interrrupt>
 4fc:	78 94       	sei
	sei();
	timer_init();
 4fe:	47 d0       	rcall	.+142    	; 0x58e <timer_init>
	////////////////////////////////
	SETCALLBACK_TIMER0_OVR(test1);
 500:	84 ee       	ldi	r24, 0xE4	; 228
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	3f d0       	rcall	.+126    	; 0x584 <SETCALLBACK_TIMER0_OVR>
 506:	c2 dd       	rcall	.-1148   	; 0x8c <DIREC>
	DIREC();
 508:	92 9a       	sbi	0x12, 2	; 18
 50a:	cc 24       	eor	r12, r12
	D2_OUTPUT;
 50c:	c3 94       	inc	r12
	SET_CallBack_INT0 (test2);
  if(!sensor_working){
	  D0_OUTPUT;
	  _delay_us(15);
	 D0_CLEAR;
	  sensor_working=1;
 50e:	d1 2c       	mov	r13, r1
 510:	0f 2e       	mov	r0, r31
 512:	f0 ed       	ldi	r31, 0xD0	; 208
}

float set_degree(int d)
{
	//OCR1A=d;
	OCR1A =160+((22*d)/9);
 514:	ef 2e       	mov	r14, r31
 516:	f1 2c       	mov	r15, r1
 518:	f0 2d       	mov	r31, r0
 51a:	0c e7       	ldi	r16, 0x7C	; 124
 51c:	11 e0       	ldi	r17, 0x01	; 1
 51e:	c8 e5       	ldi	r28, 0x58	; 88
 520:	d2 e0       	ldi	r29, 0x02	; 2
 522:	8e ef       	ldi	r24, 0xFE	; 254
	SETCALLBACK_TIMER0_OVR(test1);
	DIREC();
	D2_OUTPUT;
    while (1) 
    {
	SET_CallBack_INT0 (test2);
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	48 de       	rcall	.-880    	; 0x1b8 <SET_CallBack_INT0>
 528:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <sensor_working>
  if(!sensor_working){
 52c:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <sensor_working+0x1>
 530:	89 2b       	or	r24, r25
 532:	49 f4       	brne	.+18     	; 0x546 <main+0x62>
 534:	90 9a       	sbi	0x12, 0	; 18
 536:	90 e5       	ldi	r25, 0x50	; 80
	  D0_OUTPUT;
 538:	9a 95       	dec	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53a:	f1 f7       	brne	.-4      	; 0x538 <main+0x54>
 53c:	90 98       	cbi	0x12, 0	; 18
 53e:	d0 92 f7 00 	sts	0x00F7, r13	; 0x8000f7 <sensor_working+0x1>
	  _delay_us(15);
	 D0_CLEAR;
	  sensor_working=1;
 542:	c0 92 f6 00 	sts	0x00F6, r12	; 0x8000f6 <sensor_working>
 546:	8f e9       	ldi	r24, 0x9F	; 159
 548:	9f e0       	ldi	r25, 0x0F	; 15
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <main+0x66>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <main+0x6c>
 550:	00 00       	nop
 552:	fb bc       	out	0x2b, r15	; 43
 554:	ea bc       	out	0x2a, r14	; 42
}

float set_degree(int d)
{
	//OCR1A=d;
	OCR1A =160+((22*d)/9);
 556:	8f ec       	ldi	r24, 0xCF	; 207
 558:	97 e0       	ldi	r25, 0x07	; 7
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <main+0x76>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0x7c>
 560:	00 00       	nop
 562:	1b bd       	out	0x2b, r17	; 43
 564:	0a bd       	out	0x2a, r16	; 42
 566:	8f e9       	ldi	r24, 0x9F	; 159
 568:	9f e0       	ldi	r25, 0x0F	; 15
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <main+0x86>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x8c>
 570:	00 00       	nop
 572:	db bd       	out	0x2b, r29	; 43
 574:	ca bd       	out	0x2a, r28	; 42
 576:	8f e9       	ldi	r24, 0x9F	; 159
 578:	9f e0       	ldi	r25, 0x0F	; 15
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <main+0x96>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <main+0x9c>
 580:	00 00       	nop
 582:	cf cf       	rjmp	.-98     	; 0x522 <main+0x3e>

00000584 <SETCALLBACK_TIMER0_OVR>:
 584:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <p2f+0x1>
	TIM_TCNT1_H=0;
	TIM_TCNT1_L =0;
	TIM_TCCR1A =0;
	SET_BiT(TIM_TIMSK,TIM_TOIE1);
	SET_BiT(TIM_TIFR,TIM_ICF1);
	SET_BiT(TIM_TIFR,TIM_TOV1);
 588:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <p2f>
 58c:	08 95       	ret

0000058e <timer_init>:
 58e:	12 be       	out	0x32, r1	; 50
 590:	83 b7       	in	r24, 0x33	; 51
 592:	8f 7b       	andi	r24, 0xBF	; 191
 594:	83 bf       	out	0x33, r24	; 51
 596:	83 b7       	in	r24, 0x33	; 51
 598:	87 7f       	andi	r24, 0xF7	; 247
 59a:	83 bf       	out	0x33, r24	; 51
 59c:	83 b7       	in	r24, 0x33	; 51
 59e:	88 7f       	andi	r24, 0xF8	; 248
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	83 bf       	out	0x33, r24	; 51
 5a4:	89 b7       	in	r24, 0x39	; 57
 5a6:	81 60       	ori	r24, 0x01	; 1
 5a8:	89 bf       	out	0x39, r24	; 57
 5aa:	89 b7       	in	r24, 0x39	; 57
 5ac:	8d 7f       	andi	r24, 0xFD	; 253
 5ae:	89 bf       	out	0x39, r24	; 57
 5b0:	08 95       	ret

000005b2 <__vector_11>:
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
 5d4:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <p2f>
 5d8:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <p2f+0x1>
 5dc:	09 95       	icall
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <__vector_10>:
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
 622:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <p3f>
 626:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <p3f+0x1>
 62a:	09 95       	icall
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <__vector_9>:
}
//////
ISR(TIMER1_OVF_vect){
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	2f 93       	push	r18
 65a:	3f 93       	push	r19
 65c:	4f 93       	push	r20
 65e:	5f 93       	push	r21
 660:	6f 93       	push	r22
 662:	7f 93       	push	r23
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
 668:	af 93       	push	r26
 66a:	bf 93       	push	r27
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
	p4f();
 670:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <p4f>
 674:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <p4f+0x1>
 678:	09 95       	icall
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <__subsf3>:
 69c:	50 58       	subi	r21, 0x80	; 128

0000069e <__addsf3>:
 69e:	bb 27       	eor	r27, r27
 6a0:	aa 27       	eor	r26, r26
 6a2:	0e d0       	rcall	.+28     	; 0x6c0 <__addsf3x>
 6a4:	e5 c0       	rjmp	.+458    	; 0x870 <__fp_round>
 6a6:	d6 d0       	rcall	.+428    	; 0x854 <__fp_pscA>
 6a8:	30 f0       	brcs	.+12     	; 0x6b6 <__addsf3+0x18>
 6aa:	db d0       	rcall	.+438    	; 0x862 <__fp_pscB>
 6ac:	20 f0       	brcs	.+8      	; 0x6b6 <__addsf3+0x18>
 6ae:	31 f4       	brne	.+12     	; 0x6bc <__addsf3+0x1e>
 6b0:	9f 3f       	cpi	r25, 0xFF	; 255
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__addsf3+0x1a>
 6b4:	1e f4       	brtc	.+6      	; 0x6bc <__addsf3+0x1e>
 6b6:	cb c0       	rjmp	.+406    	; 0x84e <__fp_nan>
 6b8:	0e f4       	brtc	.+2      	; 0x6bc <__addsf3+0x1e>
 6ba:	e0 95       	com	r30
 6bc:	e7 fb       	bst	r30, 7
 6be:	c1 c0       	rjmp	.+386    	; 0x842 <__fp_inf>

000006c0 <__addsf3x>:
 6c0:	e9 2f       	mov	r30, r25
 6c2:	e7 d0       	rcall	.+462    	; 0x892 <__fp_split3>
 6c4:	80 f3       	brcs	.-32     	; 0x6a6 <__addsf3+0x8>
 6c6:	ba 17       	cp	r27, r26
 6c8:	62 07       	cpc	r22, r18
 6ca:	73 07       	cpc	r23, r19
 6cc:	84 07       	cpc	r24, r20
 6ce:	95 07       	cpc	r25, r21
 6d0:	18 f0       	brcs	.+6      	; 0x6d8 <__addsf3x+0x18>
 6d2:	71 f4       	brne	.+28     	; 0x6f0 <__addsf3x+0x30>
 6d4:	9e f5       	brtc	.+102    	; 0x73c <__addsf3x+0x7c>
 6d6:	ff c0       	rjmp	.+510    	; 0x8d6 <__fp_zero>
 6d8:	0e f4       	brtc	.+2      	; 0x6dc <__addsf3x+0x1c>
 6da:	e0 95       	com	r30
 6dc:	0b 2e       	mov	r0, r27
 6de:	ba 2f       	mov	r27, r26
 6e0:	a0 2d       	mov	r26, r0
 6e2:	0b 01       	movw	r0, r22
 6e4:	b9 01       	movw	r22, r18
 6e6:	90 01       	movw	r18, r0
 6e8:	0c 01       	movw	r0, r24
 6ea:	ca 01       	movw	r24, r20
 6ec:	a0 01       	movw	r20, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	ff 27       	eor	r31, r31
 6f2:	59 1b       	sub	r21, r25
 6f4:	99 f0       	breq	.+38     	; 0x71c <__addsf3x+0x5c>
 6f6:	59 3f       	cpi	r21, 0xF9	; 249
 6f8:	50 f4       	brcc	.+20     	; 0x70e <__addsf3x+0x4e>
 6fa:	50 3e       	cpi	r21, 0xE0	; 224
 6fc:	68 f1       	brcs	.+90     	; 0x758 <__addsf3x+0x98>
 6fe:	1a 16       	cp	r1, r26
 700:	f0 40       	sbci	r31, 0x00	; 0
 702:	a2 2f       	mov	r26, r18
 704:	23 2f       	mov	r18, r19
 706:	34 2f       	mov	r19, r20
 708:	44 27       	eor	r20, r20
 70a:	58 5f       	subi	r21, 0xF8	; 248
 70c:	f3 cf       	rjmp	.-26     	; 0x6f4 <__addsf3x+0x34>
 70e:	46 95       	lsr	r20
 710:	37 95       	ror	r19
 712:	27 95       	ror	r18
 714:	a7 95       	ror	r26
 716:	f0 40       	sbci	r31, 0x00	; 0
 718:	53 95       	inc	r21
 71a:	c9 f7       	brne	.-14     	; 0x70e <__addsf3x+0x4e>
 71c:	7e f4       	brtc	.+30     	; 0x73c <__addsf3x+0x7c>
 71e:	1f 16       	cp	r1, r31
 720:	ba 0b       	sbc	r27, r26
 722:	62 0b       	sbc	r22, r18
 724:	73 0b       	sbc	r23, r19
 726:	84 0b       	sbc	r24, r20
 728:	ba f0       	brmi	.+46     	; 0x758 <__addsf3x+0x98>
 72a:	91 50       	subi	r25, 0x01	; 1
 72c:	a1 f0       	breq	.+40     	; 0x756 <__addsf3x+0x96>
 72e:	ff 0f       	add	r31, r31
 730:	bb 1f       	adc	r27, r27
 732:	66 1f       	adc	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	c2 f7       	brpl	.-16     	; 0x72a <__addsf3x+0x6a>
 73a:	0e c0       	rjmp	.+28     	; 0x758 <__addsf3x+0x98>
 73c:	ba 0f       	add	r27, r26
 73e:	62 1f       	adc	r22, r18
 740:	73 1f       	adc	r23, r19
 742:	84 1f       	adc	r24, r20
 744:	48 f4       	brcc	.+18     	; 0x758 <__addsf3x+0x98>
 746:	87 95       	ror	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b7 95       	ror	r27
 74e:	f7 95       	ror	r31
 750:	9e 3f       	cpi	r25, 0xFE	; 254
 752:	08 f0       	brcs	.+2      	; 0x756 <__addsf3x+0x96>
 754:	b3 cf       	rjmp	.-154    	; 0x6bc <__addsf3+0x1e>
 756:	93 95       	inc	r25
 758:	88 0f       	add	r24, r24
 75a:	08 f0       	brcs	.+2      	; 0x75e <__addsf3x+0x9e>
 75c:	99 27       	eor	r25, r25
 75e:	ee 0f       	add	r30, r30
 760:	97 95       	ror	r25
 762:	87 95       	ror	r24
 764:	08 95       	ret

00000766 <__fixsfsi>:
 766:	04 d0       	rcall	.+8      	; 0x770 <__fixunssfsi>
 768:	68 94       	set
 76a:	b1 11       	cpse	r27, r1
 76c:	b5 c0       	rjmp	.+362    	; 0x8d8 <__fp_szero>
 76e:	08 95       	ret

00000770 <__fixunssfsi>:
 770:	98 d0       	rcall	.+304    	; 0x8a2 <__fp_splitA>
 772:	88 f0       	brcs	.+34     	; 0x796 <__fixunssfsi+0x26>
 774:	9f 57       	subi	r25, 0x7F	; 127
 776:	90 f0       	brcs	.+36     	; 0x79c <__fixunssfsi+0x2c>
 778:	b9 2f       	mov	r27, r25
 77a:	99 27       	eor	r25, r25
 77c:	b7 51       	subi	r27, 0x17	; 23
 77e:	a0 f0       	brcs	.+40     	; 0x7a8 <__fixunssfsi+0x38>
 780:	d1 f0       	breq	.+52     	; 0x7b6 <__fixunssfsi+0x46>
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	1a f0       	brmi	.+6      	; 0x792 <__fixunssfsi+0x22>
 78c:	ba 95       	dec	r27
 78e:	c9 f7       	brne	.-14     	; 0x782 <__fixunssfsi+0x12>
 790:	12 c0       	rjmp	.+36     	; 0x7b6 <__fixunssfsi+0x46>
 792:	b1 30       	cpi	r27, 0x01	; 1
 794:	81 f0       	breq	.+32     	; 0x7b6 <__fixunssfsi+0x46>
 796:	9f d0       	rcall	.+318    	; 0x8d6 <__fp_zero>
 798:	b1 e0       	ldi	r27, 0x01	; 1
 79a:	08 95       	ret
 79c:	9c c0       	rjmp	.+312    	; 0x8d6 <__fp_zero>
 79e:	67 2f       	mov	r22, r23
 7a0:	78 2f       	mov	r23, r24
 7a2:	88 27       	eor	r24, r24
 7a4:	b8 5f       	subi	r27, 0xF8	; 248
 7a6:	39 f0       	breq	.+14     	; 0x7b6 <__fixunssfsi+0x46>
 7a8:	b9 3f       	cpi	r27, 0xF9	; 249
 7aa:	cc f3       	brlt	.-14     	; 0x79e <__fixunssfsi+0x2e>
 7ac:	86 95       	lsr	r24
 7ae:	77 95       	ror	r23
 7b0:	67 95       	ror	r22
 7b2:	b3 95       	inc	r27
 7b4:	d9 f7       	brne	.-10     	; 0x7ac <__fixunssfsi+0x3c>
 7b6:	3e f4       	brtc	.+14     	; 0x7c6 <__fixunssfsi+0x56>
 7b8:	90 95       	com	r25
 7ba:	80 95       	com	r24
 7bc:	70 95       	com	r23
 7be:	61 95       	neg	r22
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	08 95       	ret

000007c8 <__floatunsisf>:
 7c8:	e8 94       	clt
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <__floatsisf+0x12>

000007cc <__floatsisf>:
 7cc:	97 fb       	bst	r25, 7
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__floatsisf+0x12>
 7d0:	90 95       	com	r25
 7d2:	80 95       	com	r24
 7d4:	70 95       	com	r23
 7d6:	61 95       	neg	r22
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	99 23       	and	r25, r25
 7e0:	a9 f0       	breq	.+42     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7e2:	f9 2f       	mov	r31, r25
 7e4:	96 e9       	ldi	r25, 0x96	; 150
 7e6:	bb 27       	eor	r27, r27
 7e8:	93 95       	inc	r25
 7ea:	f6 95       	lsr	r31
 7ec:	87 95       	ror	r24
 7ee:	77 95       	ror	r23
 7f0:	67 95       	ror	r22
 7f2:	b7 95       	ror	r27
 7f4:	f1 11       	cpse	r31, r1
 7f6:	f8 cf       	rjmp	.-16     	; 0x7e8 <__floatsisf+0x1c>
 7f8:	fa f4       	brpl	.+62     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7fa:	bb 0f       	add	r27, r27
 7fc:	11 f4       	brne	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	60 ff       	sbrs	r22, 0
 800:	1b c0       	rjmp	.+54     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 802:	6f 5f       	subi	r22, 0xFF	; 255
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	16 c0       	rjmp	.+44     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 80c:	88 23       	and	r24, r24
 80e:	11 f0       	breq	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	96 e9       	ldi	r25, 0x96	; 150
 812:	11 c0       	rjmp	.+34     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 814:	77 23       	and	r23, r23
 816:	21 f0       	breq	.+8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 818:	9e e8       	ldi	r25, 0x8E	; 142
 81a:	87 2f       	mov	r24, r23
 81c:	76 2f       	mov	r23, r22
 81e:	05 c0       	rjmp	.+10     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 820:	66 23       	and	r22, r22
 822:	71 f0       	breq	.+28     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 824:	96 e8       	ldi	r25, 0x86	; 134
 826:	86 2f       	mov	r24, r22
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	60 e0       	ldi	r22, 0x00	; 0
 82c:	2a f0       	brmi	.+10     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82e:	9a 95       	dec	r25
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	da f7       	brpl	.-10     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 838:	88 0f       	add	r24, r24
 83a:	96 95       	lsr	r25
 83c:	87 95       	ror	r24
 83e:	97 f9       	bld	r25, 7
 840:	08 95       	ret

00000842 <__fp_inf>:
 842:	97 f9       	bld	r25, 7
 844:	9f 67       	ori	r25, 0x7F	; 127
 846:	80 e8       	ldi	r24, 0x80	; 128
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	08 95       	ret

0000084e <__fp_nan>:
 84e:	9f ef       	ldi	r25, 0xFF	; 255
 850:	80 ec       	ldi	r24, 0xC0	; 192
 852:	08 95       	ret

00000854 <__fp_pscA>:
 854:	00 24       	eor	r0, r0
 856:	0a 94       	dec	r0
 858:	16 16       	cp	r1, r22
 85a:	17 06       	cpc	r1, r23
 85c:	18 06       	cpc	r1, r24
 85e:	09 06       	cpc	r0, r25
 860:	08 95       	ret

00000862 <__fp_pscB>:
 862:	00 24       	eor	r0, r0
 864:	0a 94       	dec	r0
 866:	12 16       	cp	r1, r18
 868:	13 06       	cpc	r1, r19
 86a:	14 06       	cpc	r1, r20
 86c:	05 06       	cpc	r0, r21
 86e:	08 95       	ret

00000870 <__fp_round>:
 870:	09 2e       	mov	r0, r25
 872:	03 94       	inc	r0
 874:	00 0c       	add	r0, r0
 876:	11 f4       	brne	.+4      	; 0x87c <__fp_round+0xc>
 878:	88 23       	and	r24, r24
 87a:	52 f0       	brmi	.+20     	; 0x890 <__fp_round+0x20>
 87c:	bb 0f       	add	r27, r27
 87e:	40 f4       	brcc	.+16     	; 0x890 <__fp_round+0x20>
 880:	bf 2b       	or	r27, r31
 882:	11 f4       	brne	.+4      	; 0x888 <__fp_round+0x18>
 884:	60 ff       	sbrs	r22, 0
 886:	04 c0       	rjmp	.+8      	; 0x890 <__fp_round+0x20>
 888:	6f 5f       	subi	r22, 0xFF	; 255
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	8f 4f       	sbci	r24, 0xFF	; 255
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	08 95       	ret

00000892 <__fp_split3>:
 892:	57 fd       	sbrc	r21, 7
 894:	90 58       	subi	r25, 0x80	; 128
 896:	44 0f       	add	r20, r20
 898:	55 1f       	adc	r21, r21
 89a:	59 f0       	breq	.+22     	; 0x8b2 <__fp_splitA+0x10>
 89c:	5f 3f       	cpi	r21, 0xFF	; 255
 89e:	71 f0       	breq	.+28     	; 0x8bc <__fp_splitA+0x1a>
 8a0:	47 95       	ror	r20

000008a2 <__fp_splitA>:
 8a2:	88 0f       	add	r24, r24
 8a4:	97 fb       	bst	r25, 7
 8a6:	99 1f       	adc	r25, r25
 8a8:	61 f0       	breq	.+24     	; 0x8c2 <__fp_splitA+0x20>
 8aa:	9f 3f       	cpi	r25, 0xFF	; 255
 8ac:	79 f0       	breq	.+30     	; 0x8cc <__fp_splitA+0x2a>
 8ae:	87 95       	ror	r24
 8b0:	08 95       	ret
 8b2:	12 16       	cp	r1, r18
 8b4:	13 06       	cpc	r1, r19
 8b6:	14 06       	cpc	r1, r20
 8b8:	55 1f       	adc	r21, r21
 8ba:	f2 cf       	rjmp	.-28     	; 0x8a0 <__fp_split3+0xe>
 8bc:	46 95       	lsr	r20
 8be:	f1 df       	rcall	.-30     	; 0x8a2 <__fp_splitA>
 8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <__fp_splitA+0x30>
 8c2:	16 16       	cp	r1, r22
 8c4:	17 06       	cpc	r1, r23
 8c6:	18 06       	cpc	r1, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	f1 cf       	rjmp	.-30     	; 0x8ae <__fp_splitA+0xc>
 8cc:	86 95       	lsr	r24
 8ce:	71 05       	cpc	r23, r1
 8d0:	61 05       	cpc	r22, r1
 8d2:	08 94       	sec
 8d4:	08 95       	ret

000008d6 <__fp_zero>:
 8d6:	e8 94       	clt

000008d8 <__fp_szero>:
 8d8:	bb 27       	eor	r27, r27
 8da:	66 27       	eor	r22, r22
 8dc:	77 27       	eor	r23, r23
 8de:	cb 01       	movw	r24, r22
 8e0:	97 f9       	bld	r25, 7
 8e2:	08 95       	ret

000008e4 <__divmodhi4>:
 8e4:	97 fb       	bst	r25, 7
 8e6:	07 2e       	mov	r0, r23
 8e8:	16 f4       	brtc	.+4      	; 0x8ee <__divmodhi4+0xa>
 8ea:	00 94       	com	r0
 8ec:	06 d0       	rcall	.+12     	; 0x8fa <__divmodhi4_neg1>
 8ee:	77 fd       	sbrc	r23, 7
 8f0:	08 d0       	rcall	.+16     	; 0x902 <__divmodhi4_neg2>
 8f2:	0b d0       	rcall	.+22     	; 0x90a <__udivmodhi4>
 8f4:	07 fc       	sbrc	r0, 7
 8f6:	05 d0       	rcall	.+10     	; 0x902 <__divmodhi4_neg2>
 8f8:	3e f4       	brtc	.+14     	; 0x908 <__divmodhi4_exit>

000008fa <__divmodhi4_neg1>:
 8fa:	90 95       	com	r25
 8fc:	81 95       	neg	r24
 8fe:	9f 4f       	sbci	r25, 0xFF	; 255
 900:	08 95       	ret

00000902 <__divmodhi4_neg2>:
 902:	70 95       	com	r23
 904:	61 95       	neg	r22
 906:	7f 4f       	sbci	r23, 0xFF	; 255

00000908 <__divmodhi4_exit>:
 908:	08 95       	ret

0000090a <__udivmodhi4>:
 90a:	aa 1b       	sub	r26, r26
 90c:	bb 1b       	sub	r27, r27
 90e:	51 e1       	ldi	r21, 0x11	; 17
 910:	07 c0       	rjmp	.+14     	; 0x920 <__udivmodhi4_ep>

00000912 <__udivmodhi4_loop>:
 912:	aa 1f       	adc	r26, r26
 914:	bb 1f       	adc	r27, r27
 916:	a6 17       	cp	r26, r22
 918:	b7 07       	cpc	r27, r23
 91a:	10 f0       	brcs	.+4      	; 0x920 <__udivmodhi4_ep>
 91c:	a6 1b       	sub	r26, r22
 91e:	b7 0b       	sbc	r27, r23

00000920 <__udivmodhi4_ep>:
 920:	88 1f       	adc	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	5a 95       	dec	r21
 926:	a9 f7       	brne	.-22     	; 0x912 <__udivmodhi4_loop>
 928:	80 95       	com	r24
 92a:	90 95       	com	r25
 92c:	bc 01       	movw	r22, r24
 92e:	cd 01       	movw	r24, r26
 930:	08 95       	ret

00000932 <__itoa_ncheck>:
 932:	bb 27       	eor	r27, r27
 934:	4a 30       	cpi	r20, 0x0A	; 10
 936:	31 f4       	brne	.+12     	; 0x944 <__itoa_ncheck+0x12>
 938:	99 23       	and	r25, r25
 93a:	22 f4       	brpl	.+8      	; 0x944 <__itoa_ncheck+0x12>
 93c:	bd e2       	ldi	r27, 0x2D	; 45
 93e:	90 95       	com	r25
 940:	81 95       	neg	r24
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	01 c0       	rjmp	.+2      	; 0x948 <__utoa_common>

00000946 <__utoa_ncheck>:
 946:	bb 27       	eor	r27, r27

00000948 <__utoa_common>:
 948:	fb 01       	movw	r30, r22
 94a:	55 27       	eor	r21, r21
 94c:	aa 27       	eor	r26, r26
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	aa 1f       	adc	r26, r26
 954:	a4 17       	cp	r26, r20
 956:	10 f0       	brcs	.+4      	; 0x95c <__utoa_common+0x14>
 958:	a4 1b       	sub	r26, r20
 95a:	83 95       	inc	r24
 95c:	50 51       	subi	r21, 0x10	; 16
 95e:	b9 f7       	brne	.-18     	; 0x94e <__utoa_common+0x6>
 960:	a0 5d       	subi	r26, 0xD0	; 208
 962:	aa 33       	cpi	r26, 0x3A	; 58
 964:	08 f0       	brcs	.+2      	; 0x968 <__utoa_common+0x20>
 966:	a9 5d       	subi	r26, 0xD9	; 217
 968:	a1 93       	st	Z+, r26
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	79 f7       	brne	.-34     	; 0x94c <__utoa_common+0x4>
 96e:	b1 11       	cpse	r27, r1
 970:	b1 93       	st	Z+, r27
 972:	11 92       	st	Z+, r1
 974:	cb 01       	movw	r24, r22
 976:	00 c0       	rjmp	.+0      	; 0x978 <strrev>

00000978 <strrev>:
 978:	dc 01       	movw	r26, r24
 97a:	fc 01       	movw	r30, r24
 97c:	67 2f       	mov	r22, r23
 97e:	71 91       	ld	r23, Z+
 980:	77 23       	and	r23, r23
 982:	e1 f7       	brne	.-8      	; 0x97c <strrev+0x4>
 984:	32 97       	sbiw	r30, 0x02	; 2
 986:	04 c0       	rjmp	.+8      	; 0x990 <strrev+0x18>
 988:	7c 91       	ld	r23, X
 98a:	6d 93       	st	X+, r22
 98c:	70 83       	st	Z, r23
 98e:	62 91       	ld	r22, -Z
 990:	ae 17       	cp	r26, r30
 992:	bf 07       	cpc	r27, r31
 994:	c8 f3       	brcs	.-14     	; 0x988 <strrev+0x10>
 996:	08 95       	ret

00000998 <_exit>:
 998:	f8 94       	cli

0000099a <__stop_program>:
 99a:	ff cf       	rjmp	.-2      	; 0x99a <__stop_program>
