
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00000bc6  00000c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  008000f2  008000f2  00000cec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a1d  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5e  00000000  00000000  0000294d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d0d  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  000052b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008956  00000000  00000000  0000577c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c06  00000000  00000000  0000e0d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000db5  00000000  00000000  0000ee50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	f9 c0       	rjmp	.+498    	; 0x1f8 <__vector_1>
   6:	00 00       	nop
   8:	1e c1       	rjmp	.+572    	; 0x246 <__vector_2>
   a:	00 00       	nop
   c:	43 c1       	rjmp	.+646    	; 0x294 <__vector_3>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	fd c3       	rjmp	.+2042   	; 0x820 <__vector_9>
  26:	00 00       	nop
  28:	c0 c3       	rjmp	.+1920   	; 0x7aa <__vector_10>
  2a:	00 00       	nop
  2c:	97 c3       	rjmp	.+1838   	; 0x75c <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3f       	cpi	r26, 0xF2	; 242
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 ef       	ldi	r26, 0xF2	; 242
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 33       	cpi	r26, 0x3C	; 60
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	55 d2       	rcall	.+1194   	; 0x532 <main>
  88:	9c c5       	rjmp	.+2872   	; 0xbc2 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <DIREC>:
	{D,PiN6,HIGH,OUT},
	{D,PiN7,HIGH,OUT},
};


void DIREC (void){
  8c:	e0 e6       	ldi	r30, 0x60	; 96
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	20 ee       	ldi	r18, 0xE0	; 224
  92:	30 e0       	ldi	r19, 0x00	; 0
			}
		}else if (pins[i].PORT==D){
			if(pins[i].O == OUT){
				SET_BiT(DIO_DDRD,pins[i].P);
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	70 e0       	ldi	r23, 0x00	; 0
void DIREC (void){
	TU08 count =0;
	count= sizeof(pins) / (sizeof pins[0]);
	TU08 i;
	for(i=0;i<count;i++){
		if(pins[i].PORT==A){
  98:	80 81       	ld	r24, Z
  9a:	81 11       	cpse	r24, r1
  9c:	1b c0       	rjmp	.+54     	; 0xd4 <DIREC+0x48>
			if(pins[i].O == OUT){
  9e:	83 81       	ldd	r24, Z+3	; 0x03
  a0:	81 11       	cpse	r24, r1
  a2:	0b c0       	rjmp	.+22     	; 0xba <DIREC+0x2e>
			SET_BiT(DIO_DDRA,pins[i].P);
  a4:	4a b3       	in	r20, 0x1a	; 26
  a6:	cb 01       	movw	r24, r22
  a8:	01 80       	ldd	r0, Z+1	; 0x01
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIREC+0x24>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIREC+0x20>
  b4:	84 2b       	or	r24, r20
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	63 c0       	rjmp	.+198    	; 0x180 <DIREC+0xf4>
			}else{
			CLR_Bit(DIO_DDRA,pins[i].P);	
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	ab 01       	movw	r20, r22
  be:	01 80       	ldd	r0, Z+1	; 0x01
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIREC+0x3a>
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIREC+0x36>
  ca:	84 2f       	mov	r24, r20
  cc:	80 95       	com	r24
  ce:	89 23       	and	r24, r25
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	56 c0       	rjmp	.+172    	; 0x180 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==B){
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	d9 f4       	brne	.+54     	; 0x10e <DIREC+0x82>
			if(pins[i].O == OUT){
  d8:	83 81       	ldd	r24, Z+3	; 0x03
  da:	81 11       	cpse	r24, r1
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <DIREC+0x68>
				SET_BiT(DIO_DDRB,pins[i].P);
  de:	47 b3       	in	r20, 0x17	; 23
  e0:	cb 01       	movw	r24, r22
  e2:	01 80       	ldd	r0, Z+1	; 0x01
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIREC+0x5e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIREC+0x5a>
  ee:	84 2b       	or	r24, r20
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	46 c0       	rjmp	.+140    	; 0x180 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRB,pins[i].P);
  f4:	97 b3       	in	r25, 0x17	; 23
  f6:	ab 01       	movw	r20, r22
  f8:	01 80       	ldd	r0, Z+1	; 0x01
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIREC+0x74>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIREC+0x70>
 104:	84 2f       	mov	r24, r20
 106:	80 95       	com	r24
 108:	89 23       	and	r24, r25
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	39 c0       	rjmp	.+114    	; 0x180 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==C){
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	d9 f4       	brne	.+54     	; 0x148 <DIREC+0xbc>
			if(pins[i].O == OUT){
 112:	83 81       	ldd	r24, Z+3	; 0x03
 114:	81 11       	cpse	r24, r1
 116:	0b c0       	rjmp	.+22     	; 0x12e <DIREC+0xa2>
				SET_BiT(DIO_DDRC,pins[i].P);
 118:	44 b3       	in	r20, 0x14	; 20
 11a:	cb 01       	movw	r24, r22
 11c:	01 80       	ldd	r0, Z+1	; 0x01
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIREC+0x98>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIREC+0x94>
 128:	84 2b       	or	r24, r20
 12a:	84 bb       	out	0x14, r24	; 20
 12c:	29 c0       	rjmp	.+82     	; 0x180 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRC,pins[i].P);
 12e:	94 b3       	in	r25, 0x14	; 20
 130:	ab 01       	movw	r20, r22
 132:	01 80       	ldd	r0, Z+1	; 0x01
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIREC+0xae>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIREC+0xaa>
 13e:	84 2f       	mov	r24, r20
 140:	80 95       	com	r24
 142:	89 23       	and	r24, r25
 144:	84 bb       	out	0x14, r24	; 20
 146:	1c c0       	rjmp	.+56     	; 0x180 <DIREC+0xf4>
			}
		}else if (pins[i].PORT==D){
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	d1 f4       	brne	.+52     	; 0x180 <DIREC+0xf4>
			if(pins[i].O == OUT){
 14c:	83 81       	ldd	r24, Z+3	; 0x03
 14e:	81 11       	cpse	r24, r1
 150:	0b c0       	rjmp	.+22     	; 0x168 <DIREC+0xdc>
				SET_BiT(DIO_DDRD,pins[i].P);
 152:	41 b3       	in	r20, 0x11	; 17
 154:	cb 01       	movw	r24, r22
 156:	01 80       	ldd	r0, Z+1	; 0x01
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIREC+0xd2>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIREC+0xce>
 162:	84 2b       	or	r24, r20
 164:	81 bb       	out	0x11, r24	; 17
 166:	0c c0       	rjmp	.+24     	; 0x180 <DIREC+0xf4>
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
 168:	91 b3       	in	r25, 0x11	; 17
 16a:	ab 01       	movw	r20, r22
 16c:	01 80       	ldd	r0, Z+1	; 0x01
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIREC+0xe8>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIREC+0xe4>
 178:	84 2f       	mov	r24, r20
 17a:	80 95       	com	r24
 17c:	89 23       	and	r24, r25
 17e:	81 bb       	out	0x11, r24	; 17
 180:	34 96       	adiw	r30, 0x04	; 4

void DIREC (void){
	TU08 count =0;
	count= sizeof(pins) / (sizeof pins[0]);
	TU08 i;
	for(i=0;i<count;i++){
 182:	e2 17       	cp	r30, r18
 184:	f3 07       	cpc	r31, r19
 186:	09 f0       	breq	.+2      	; 0x18a <DIREC+0xfe>
 188:	87 cf       	rjmp	.-242    	; 0x98 <DIREC+0xc>
				}else{
				CLR_Bit(DIO_DDRD,pins[i].P);
			}
		}
	}
}
 18a:	08 95       	ret

0000018c <DCMOTOR_Init>:
 * Created: 11/29/2021 7:11:32 PM
 *  Author: Mina
 */ 
#include "DC_Motor.h"
void DCMOTOR_Init (void){
	PWM0_Init();
 18c:	35 c3       	rjmp	.+1642   	; 0x7f8 <PWM0_Init>
 18e:	08 95       	ret

00000190 <DCMOTOR_SEtDIR>:
}
void DCMOTOR_SEtDIR(DCMOTOR_DIR dir){
	#if dir == DIR_CLOCK_WISE
	C3_CLEAR;
 190:	ab 98       	cbi	0x15, 3	; 21
	C4_OUTPUT;
 192:	ac 9a       	sbi	0x15, 4	; 21
	C5_CLEAR;
 194:	ad 98       	cbi	0x15, 5	; 21
	C6_OUTPUT;
 196:	ae 9a       	sbi	0x15, 6	; 21
 198:	08 95       	ret

0000019a <DCMOTOR_SETSPEED>:
	C6_CLEAR;
	#endif
}
void DCMOTOR_SETSPEED(TU08 sped){
	 sped *=10;
	 PWM0_GEN(sped);
 19a:	88 0f       	add	r24, r24
 19c:	98 2f       	mov	r25, r24
 19e:	99 0f       	add	r25, r25
 1a0:	99 0f       	add	r25, r25
 1a2:	89 0f       	add	r24, r25
 1a4:	34 c3       	rjmp	.+1640   	; 0x80e <PWM0_GEN>
 1a6:	08 95       	ret

000001a8 <DCMOTOR_Start>:
	
}
void DCMOTOR_Start(void){
	PWM0_Start ();
 1a8:	37 c3       	rjmp	.+1646   	; 0x818 <PWM0_Start>
 1aa:	08 95       	ret

000001ac <DCMOTOR_Stop>:
}
void DCMOTOR_Stop(void){
	C3_CLEAR;
 1ac:	ab 98       	cbi	0x15, 3	; 21
	C4_CLEAR;
 1ae:	ac 98       	cbi	0x15, 4	; 21
	C6_CLEAR;
 1b0:	ae 98       	cbi	0x15, 6	; 21
	C5_CLEAR;
 1b2:	ad 98       	cbi	0x15, 5	; 21
 1b4:	08 95       	ret

000001b6 <DCMOTOR_RIGHT>:
}
void DCMOTOR_RIGHT(void){
	
	C6_CLEAR;
 1b6:	ae 98       	cbi	0x15, 6	; 21
	C5_CLEAR;
 1b8:	ad 98       	cbi	0x15, 5	; 21
 1ba:	08 95       	ret

000001bc <DCMOTOR_LEFT>:
}
void DCMOTOR_LEFT(void){
	C4_CLEAR;
 1bc:	ac 98       	cbi	0x15, 4	; 21
	C3_CLEAR;
 1be:	ab 98       	cbi	0x15, 3	; 21
 1c0:	08 95       	ret

000001c2 <init_interrrupt>:
}
void SET_CallBack_INT1 (void (*p2func)(void)){
	p2f1 = p2func;
}
void SET_CallBack_INT2 (void (*p2func)(void)){
	p2f2 = p2func;
 1c2:	8b b7       	in	r24, 0x3b	; 59
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	8b bf       	out	0x3b, r24	; 59
 1c8:	85 b7       	in	r24, 0x35	; 53
 1ca:	8d 7f       	andi	r24, 0xFD	; 253
 1cc:	85 bf       	out	0x35, r24	; 53
 1ce:	85 b7       	in	r24, 0x35	; 53
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	85 bf       	out	0x35, r24	; 53
 1d4:	8b b7       	in	r24, 0x3b	; 59
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	8b bf       	out	0x3b, r24	; 59
 1da:	85 b7       	in	r24, 0x35	; 53
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	85 bf       	out	0x35, r24	; 53
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	85 bf       	out	0x35, r24	; 53
 1e6:	8f b7       	in	r24, 0x3f	; 63
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	8f bf       	out	0x3f, r24	; 63
 1ec:	08 95       	ret

000001ee <SET_CallBack_INT0>:
 1ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <p2f0+0x1>
 1f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <p2f0>
 1f6:	08 95       	ret

000001f8 <__vector_1>:
}
/////////////////////////////////////////////////
ISR(INT0_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	p2f0();	
 21a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <p2f0>
 21e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <p2f0+0x1>
 222:	09 95       	icall
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <__vector_2>:
ISR(INT1_vect){
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
    p2f1();
 268:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <p2f1>
 26c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <p2f1+0x1>
 270:	09 95       	icall
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_3>:
ISR(INT2_vect){
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
    p2f2();
 2b6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <p2f2>
 2ba:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <p2f2+0x1>
 2be:	09 95       	icall
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <lcd_send_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	98 2f       	mov	r25, r24
 2e4:	90 7f       	andi	r25, 0xF0	; 240
 2e6:	9b bb       	out	0x1b, r25	; 27
 2e8:	c1 98       	cbi	0x18, 1	; 24
 2ea:	c3 9a       	sbi	0x18, 3	; 24
 2ec:	e1 ee       	ldi	r30, 0xE1	; 225
 2ee:	f4 e0       	ldi	r31, 0x04	; 4
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_send_command+0xe>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <lcd_send_command+0x14>
 2f6:	00 00       	nop
 2f8:	c3 98       	cbi	0x18, 3	; 24
 2fa:	e1 ee       	ldi	r30, 0xE1	; 225
 2fc:	f4 e0       	ldi	r31, 0x04	; 4
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_send_command+0x1c>
 302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_send_command+0x22>
 304:	00 00       	nop
 306:	f0 e1       	ldi	r31, 0x10	; 16
 308:	8f 9f       	mul	r24, r31
 30a:	c0 01       	movw	r24, r0
 30c:	11 24       	eor	r1, r1
 30e:	8b bb       	out	0x1b, r24	; 27
 310:	c3 9a       	sbi	0x18, 3	; 24
 312:	81 ee       	ldi	r24, 0xE1	; 225
 314:	94 e0       	ldi	r25, 0x04	; 4
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <lcd_send_command+0x34>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <lcd_send_command+0x3a>
 31c:	00 00       	nop
 31e:	c3 98       	cbi	0x18, 3	; 24
 320:	e1 ee       	ldi	r30, 0xE1	; 225
 322:	f4 e0       	ldi	r31, 0x04	; 4
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <lcd_send_command+0x42>
 328:	00 c0       	rjmp	.+0      	; 0x32a <lcd_send_command+0x48>
 32a:	00 00       	nop
 32c:	08 95       	ret

0000032e <lcd_init>:
 32e:	80 ef       	ldi	r24, 0xF0	; 240
 330:	8a bb       	out	0x1a, r24	; 26
 332:	87 b3       	in	r24, 0x17	; 23
 334:	8e 60       	ori	r24, 0x0E	; 14
 336:	87 bb       	out	0x17, r24	; 23
 338:	80 e2       	ldi	r24, 0x20	; 32
 33a:	8b bb       	out	0x1b, r24	; 27
 33c:	c3 9a       	sbi	0x18, 3	; 24
 33e:	81 ee       	ldi	r24, 0xE1	; 225
 340:	94 e0       	ldi	r25, 0x04	; 4
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <lcd_init+0x14>
 346:	00 c0       	rjmp	.+0      	; 0x348 <lcd_init+0x1a>
 348:	00 00       	nop
 34a:	c3 98       	cbi	0x18, 3	; 24
 34c:	81 ee       	ldi	r24, 0xE1	; 225
 34e:	94 e0       	ldi	r25, 0x04	; 4
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <lcd_init+0x22>
 354:	00 c0       	rjmp	.+0      	; 0x356 <lcd_init+0x28>
 356:	00 00       	nop
 358:	88 e2       	ldi	r24, 0x28	; 40
 35a:	c3 df       	rcall	.-122    	; 0x2e2 <lcd_send_command>
 35c:	81 ee       	ldi	r24, 0xE1	; 225
 35e:	94 e0       	ldi	r25, 0x04	; 4
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <lcd_init+0x32>
 364:	00 c0       	rjmp	.+0      	; 0x366 <lcd_init+0x38>
 366:	00 00       	nop
 368:	8f e0       	ldi	r24, 0x0F	; 15
 36a:	bb df       	rcall	.-138    	; 0x2e2 <lcd_send_command>
 36c:	81 ee       	ldi	r24, 0xE1	; 225
 36e:	94 e0       	ldi	r25, 0x04	; 4
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <lcd_init+0x42>
 374:	00 c0       	rjmp	.+0      	; 0x376 <lcd_init+0x48>
 376:	00 00       	nop
 378:	80 e8       	ldi	r24, 0x80	; 128
 37a:	b3 cf       	rjmp	.-154    	; 0x2e2 <lcd_send_command>
 37c:	08 95       	ret

0000037e <lcd_write_character>:
 37e:	98 2f       	mov	r25, r24
 380:	90 7f       	andi	r25, 0xF0	; 240
 382:	9b bb       	out	0x1b, r25	; 27
 384:	c1 9a       	sbi	0x18, 1	; 24
 386:	c3 9a       	sbi	0x18, 3	; 24
 388:	e1 ee       	ldi	r30, 0xE1	; 225
 38a:	f4 e0       	ldi	r31, 0x04	; 4
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_write_character+0xe>
 390:	00 c0       	rjmp	.+0      	; 0x392 <lcd_write_character+0x14>
 392:	00 00       	nop
 394:	c3 98       	cbi	0x18, 3	; 24
 396:	e1 ee       	ldi	r30, 0xE1	; 225
 398:	f4 e0       	ldi	r31, 0x04	; 4
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <lcd_write_character+0x1c>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <lcd_write_character+0x22>
 3a0:	00 00       	nop
 3a2:	f0 e1       	ldi	r31, 0x10	; 16
 3a4:	8f 9f       	mul	r24, r31
 3a6:	c0 01       	movw	r24, r0
 3a8:	11 24       	eor	r1, r1
 3aa:	8b bb       	out	0x1b, r24	; 27
 3ac:	c3 9a       	sbi	0x18, 3	; 24
 3ae:	81 ee       	ldi	r24, 0xE1	; 225
 3b0:	94 e0       	ldi	r25, 0x04	; 4
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_write_character+0x34>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd_write_character+0x3a>
 3b8:	00 00       	nop
 3ba:	c3 98       	cbi	0x18, 3	; 24
 3bc:	e1 ee       	ldi	r30, 0xE1	; 225
 3be:	f4 e0       	ldi	r31, 0x04	; 4
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_write_character+0x42>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_write_character+0x48>
 3c6:	00 00       	nop
 3c8:	08 95       	ret

000003ca <lcd_write_word>:
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
 3d0:	88 81       	ld	r24, Y
 3d2:	88 23       	and	r24, r24
 3d4:	29 f0       	breq	.+10     	; 0x3e0 <lcd_write_word+0x16>
 3d6:	21 96       	adiw	r28, 0x01	; 1
 3d8:	d2 df       	rcall	.-92     	; 0x37e <lcd_write_character>
 3da:	89 91       	ld	r24, Y+
 3dc:	81 11       	cpse	r24, r1
 3de:	fc cf       	rjmp	.-8      	; 0x3d8 <lcd_write_word+0xe>
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <lcd_goto_xy>:
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
	_delay_ms(5);
}
void lcd_goto_xy (TU08 line,TU08 pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
 3e6:	20 e4       	ldi	r18, 0x40	; 64
 3e8:	82 9f       	mul	r24, r18
 3ea:	c0 01       	movw	r24, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	86 0f       	add	r24, r22
 3f2:	77 df       	rcall	.-274    	; 0x2e2 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	8a 95       	dec	r24
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <lcd_goto_xy+0x10>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <lcd_goto_xy+0x16>
 3fc:	08 95       	ret

000003fe <test1>:
	OCR1A=d;
	//OCR2=d;
	//OCR1A =160+((22*d)/9);
	//OCR2 =160+((22*d)/9);
	//OCR1A=160+((22*d)/9);
}
 3fe:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <timer_counter>
 402:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <timer_counter+0x1>
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <timer_counter+0x1>
 40c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <timer_counter>
 410:	8b 3d       	cpi	r24, 0xDB	; 219
 412:	92 40       	sbci	r25, 0x02	; 2
 414:	6c f0       	brlt	.+26     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 416:	12 be       	out	0x32, r1	; 50
 418:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <sensor_working+0x1>
 41c:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <sensor_working>
 420:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <rising_edge+0x1>
 424:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <rising_edge>
 428:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <timer_counter+0x1>
 42c:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <timer_counter>
 430:	08 95       	ret

00000432 <test2>:
 432:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <sensor_working>
 436:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <sensor_working+0x1>
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	09 f0       	breq	.+2      	; 0x440 <test2+0xe>
 43e:	69 c0       	rjmp	.+210    	; 0x512 <test2+0xe0>
 440:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <rising_edge>
 444:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <rising_edge+0x1>
 448:	89 2b       	or	r24, r25
 44a:	61 f4       	brne	.+24     	; 0x464 <test2+0x32>
 44c:	12 be       	out	0x32, r1	; 50
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <rising_edge+0x1>
 456:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <rising_edge>
 45a:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <timer_counter+0x1>
 45e:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <timer_counter>
 462:	08 95       	ret
 464:	22 b7       	in	r18, 0x32	; 50
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <timer_counter>
 46e:	82 0f       	add	r24, r18
 470:	91 1d       	adc	r25, r1
 472:	62 ed       	ldi	r22, 0xD2	; 210
 474:	71 e0       	ldi	r23, 0x01	; 1
 476:	4b d3       	rcall	.+1686   	; 0xb0e <__divmodhi4>
 478:	07 2e       	mov	r0, r23
 47a:	00 0c       	add	r0, r0
 47c:	88 0b       	sbc	r24, r24
 47e:	99 0b       	sbc	r25, r25
 480:	92 d2       	rcall	.+1316   	; 0x9a6 <__floatsisf>
 482:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <distance>
 486:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <distance+0x1>
 48a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <distance+0x2>
 48e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <distance+0x3>
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	a7 df       	rcall	.-178    	; 0x3e6 <lcd_goto_xy>
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e8       	ldi	r20, 0x80	; 128
 49e:	50 e4       	ldi	r21, 0x40	; 64
 4a0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <distance>
 4a4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <distance+0x1>
 4a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <distance+0x2>
 4ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <distance+0x3>
 4b0:	de d1       	rcall	.+956    	; 0x86e <__subsf3>
 4b2:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <dis>
 4b6:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <dis+0x1>
 4ba:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <dis+0x2>
 4be:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <dis+0x3>
 4c2:	3e d2       	rcall	.+1148   	; 0x940 <__fixsfsi>
 4c4:	dc 01       	movw	r26, r24
 4c6:	cb 01       	movw	r24, r22
 4c8:	4a e0       	ldi	r20, 0x0A	; 10
 4ca:	6a e0       	ldi	r22, 0x0A	; 10
 4cc:	71 e0       	ldi	r23, 0x01	; 1
 4ce:	46 d3       	rcall	.+1676   	; 0xb5c <__itoa_ncheck>
 4d0:	aa e0       	ldi	r26, 0x0A	; 10
 4d2:	b1 e0       	ldi	r27, 0x01	; 1
 4d4:	0d 90       	ld	r0, X+
 4d6:	00 20       	and	r0, r0
 4d8:	e9 f7       	brne	.-6      	; 0x4d4 <test2+0xa2>
 4da:	11 97       	sbiw	r26, 0x01	; 1
 4dc:	85 e0       	ldi	r24, 0x05	; 5
 4de:	e0 ee       	ldi	r30, 0xE0	; 224
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	01 90       	ld	r0, Z+
 4e4:	0d 92       	st	X+, r0
 4e6:	8a 95       	dec	r24
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <test2+0xb0>
 4ea:	8a e0       	ldi	r24, 0x0A	; 10
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	6d df       	rcall	.-294    	; 0x3ca <lcd_write_word>
 4f0:	2f ef       	ldi	r18, 0xFF	; 255
 4f2:	83 ef       	ldi	r24, 0xF3	; 243
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	80 40       	sbci	r24, 0x00	; 0
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <test2+0xc4>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <test2+0xce>
 500:	00 00       	nop
 502:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <timer_counter+0x1>
 506:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <timer_counter>
 50a:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <rising_edge+0x1>
 50e:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <rising_edge>
 512:	08 95       	ret

00000514 <Wait>:
 514:	24 e1       	ldi	r18, 0x14	; 20
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	31 97       	sbiw	r30, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <Wait+0x8>
 520:	fc 01       	movw	r30, r24
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <Wait+0xe>
 526:	fc 01       	movw	r30, r24
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <Wait+0x14>
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	a9 f7       	brne	.-22     	; 0x51a <Wait+0x6>
 530:	08 95       	ret

00000532 <main>:
}
///////////////////////////////////////////
int main(void)
{
	//servo_init();
	lcd_init();
 532:	fd de       	rcall	.-518    	; 0x32e <lcd_init>
	lcd_write_word("Distance is");
 534:	85 ee       	ldi	r24, 0xE5	; 229
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	48 df       	rcall	.-368    	; 0x3ca <lcd_write_word>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53a:	8f e3       	ldi	r24, 0x3F	; 63
 53c:	9c e9       	ldi	r25, 0x9C	; 156
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <main+0xc>
 542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x12>
	_delay_ms(10);
	init_interrrupt();
 544:	00 00       	nop
	sei();
 546:	3d de       	rcall	.-902    	; 0x1c2 <init_interrrupt>
	timer_init();
 548:	78 94       	sei
	DCMOTOR_Init();
 54a:	f6 d0       	rcall	.+492    	; 0x738 <timer_init>
	////////////////////////////////
	SETCALLBACK_TIMER0_OVR(test1);
 54c:	1f de       	rcall	.-962    	; 0x18c <DCMOTOR_Init>
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	ed d0       	rcall	.+474    	; 0x72e <SETCALLBACK_TIMER0_OVR>
	DIREC();
 554:	9b dd       	rcall	.-1226   	; 0x8c <DIREC>
 556:	aa 24       	eor	r10, r10
	SET_CallBack_INT0 (test2);
  if(!sensor_working){ // make sensor working be 1 to get read
	  D0_OUTPUT;
	  _delay_us(15);
	 D0_CLEAR;
	  sensor_working=1;
 558:	a3 94       	inc	r10
 55a:	b1 2c       	mov	r11, r1
  //DCMOTOR_SEtDIR(DIR_CLOCK_WISE);
  // DCMOTOR_Start();
 //  DCMOTOR_SETSPEED(40);
 

 OCR1A=97;   //0 degree
 55c:	01 e6       	ldi	r16, 0x61	; 97
 55e:	10 e0       	ldi	r17, 0x00	; 0
 read = dis; 
 //OCR1A=425;  //90 degree
 //Wait();

//535
 OCR1A=535;  //180 degree
 560:	c7 e1       	ldi	r28, 0x17	; 23
 562:	d2 e0       	ldi	r29, 0x02	; 2
	////////////////////////////////
	SETCALLBACK_TIMER0_OVR(test1);
	DIREC();
    while (1) 
    {
	SET_CallBack_INT0 (test2);
 564:	89 e1       	ldi	r24, 0x19	; 25
 566:	92 e0       	ldi	r25, 0x02	; 2
 568:	42 de       	rcall	.-892    	; 0x1ee <SET_CallBack_INT0>
 56a:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <sensor_working>
  if(!sensor_working){ // make sensor working be 1 to get read
 56e:	90 91 ff 00 	lds	r25, 0x00FF	; 0x8000ff <sensor_working+0x1>
 572:	89 2b       	or	r24, r25
 574:	49 f4       	brne	.+18     	; 0x588 <main+0x56>
 576:	90 9a       	sbi	0x12, 0	; 18
	  D0_OUTPUT;
 578:	90 e5       	ldi	r25, 0x50	; 80
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57a:	9a 95       	dec	r25
 57c:	f1 f7       	brne	.-4      	; 0x57a <main+0x48>
	  _delay_us(15);
	 D0_CLEAR;
 57e:	90 98       	cbi	0x12, 0	; 18
	  sensor_working=1;
 580:	b0 92 ff 00 	sts	0x00FF, r11	; 0x8000ff <sensor_working+0x1>
 584:	a0 92 fe 00 	sts	0x00FE, r10	; 0x8000fe <sensor_working>
  //DCMOTOR_SEtDIR(DIR_CLOCK_WISE);
  // DCMOTOR_Start();
 //  DCMOTOR_SETSPEED(40);
 

 OCR1A=97;   //0 degree
 588:	1b bd       	out	0x2b, r17	; 43
 58a:	0a bd       	out	0x2a, r16	; 42
 Wait();
 58c:	c3 df       	rcall	.-122    	; 0x514 <Wait>
 58e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <dis>
 read = dis; 
 592:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <dis+0x1>
 596:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <dis+0x2>
 59a:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <dis+0x3>
 59e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <read>
 5a2:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <read+0x1>
 5a6:	a0 93 f8 00 	sts	0x00F8, r26	; 0x8000f8 <read+0x2>
 5aa:	b0 93 f9 00 	sts	0x00F9, r27	; 0x8000f9 <read+0x3>
 //OCR1A=425;  //90 degree
 //Wait();

//535
 OCR1A=535;  //180 degree
 5ae:	db bd       	out	0x2b, r29	; 43
 5b0:	ca bd       	out	0x2a, r28	; 42
 Wait();
 5b2:	b0 df       	rcall	.-160    	; 0x514 <Wait>
 5b4:	c0 90 32 01 	lds	r12, 0x0132	; 0x800132 <dis>
 readtwo = dis;
 5b8:	d0 90 33 01 	lds	r13, 0x0133	; 0x800133 <dis+0x1>
 5bc:	e0 90 34 01 	lds	r14, 0x0134	; 0x800134 <dis+0x2>
 5c0:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <dis+0x3>
 5c4:	c0 92 f2 00 	sts	0x00F2, r12	; 0x8000f2 <__data_end>
 5c8:	d0 92 f3 00 	sts	0x00F3, r13	; 0x8000f3 <__data_end+0x1>
 5cc:	e0 92 f4 00 	sts	0x00F4, r14	; 0x8000f4 <__data_end+0x2>
 5d0:	f0 92 f5 00 	sts	0x00F5, r15	; 0x8000f5 <__data_end+0x3>
 5d4:	40 90 f6 00 	lds	r4, 0x00F6	; 0x8000f6 <read>
//OCR1A=425;  //135 degree

if(read >=0 && read <= 12){
 5d8:	50 90 f7 00 	lds	r5, 0x00F7	; 0x8000f7 <read+0x1>
 5dc:	60 90 f8 00 	lds	r6, 0x00F8	; 0x8000f8 <read+0x2>
 5e0:	70 90 f9 00 	lds	r7, 0x00F9	; 0x8000f9 <read+0x3>
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	a9 01       	movw	r20, r18
 5ea:	c3 01       	movw	r24, r6
 5ec:	b2 01       	movw	r22, r4
 5ee:	8b d2       	rcall	.+1302   	; 0xb06 <__gesf2>
 5f0:	88 23       	and	r24, r24
 5f2:	7c f0       	brlt	.+30     	; 0x612 <main+0xe0>
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	40 e4       	ldi	r20, 0x40	; 64
 5fa:	51 e4       	ldi	r21, 0x41	; 65
 5fc:	c3 01       	movw	r24, r6
 5fe:	b2 01       	movw	r22, r4
 600:	9b d1       	rcall	.+822    	; 0x938 <__cmpsf2>
 602:	18 16       	cp	r1, r24
	DCMOTOR_Stop();
 604:	34 f0       	brlt	.+12     	; 0x612 <main+0xe0>
 606:	d2 dd       	rcall	.-1116   	; 0x1ac <DCMOTOR_Stop>
	DCMOTOR_RIGHT();
 608:	d6 dd       	rcall	.-1108   	; 0x1b6 <DCMOTOR_RIGHT>
 60a:	ce dd       	rcall	.-1124   	; 0x1a8 <DCMOTOR_Start>
	 DCMOTOR_Start();
 60c:	88 e2       	ldi	r24, 0x28	; 40
 60e:	c5 dd       	rcall	.-1142   	; 0x19a <DCMOTOR_SETSPEED>
	DCMOTOR_SETSPEED(40);
 610:	a9 cf       	rjmp	.-174    	; 0x564 <main+0x32>
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	30 e0       	ldi	r19, 0x00	; 0
	
}else if (readtwo >=0 && readtwo <= 12){
 616:	a9 01       	movw	r20, r18
 618:	c7 01       	movw	r24, r14
 61a:	b6 01       	movw	r22, r12
 61c:	74 d2       	rcall	.+1256   	; 0xb06 <__gesf2>
 61e:	88 23       	and	r24, r24
 620:	7c f0       	brlt	.+30     	; 0x640 <main+0x10e>
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 e4       	ldi	r20, 0x40	; 64
 628:	51 e4       	ldi	r21, 0x41	; 65
 62a:	c7 01       	movw	r24, r14
 62c:	b6 01       	movw	r22, r12
 62e:	84 d1       	rcall	.+776    	; 0x938 <__cmpsf2>
 630:	18 16       	cp	r1, r24
	DCMOTOR_Stop();
 632:	7c f0       	brlt	.+30     	; 0x652 <main+0x120>
 634:	bb dd       	rcall	.-1162   	; 0x1ac <DCMOTOR_Stop>
	DCMOTOR_LEFT();
 636:	c2 dd       	rcall	.-1148   	; 0x1bc <DCMOTOR_LEFT>
	 DCMOTOR_Start();
 638:	b7 dd       	rcall	.-1170   	; 0x1a8 <DCMOTOR_Start>
 63a:	88 e2       	ldi	r24, 0x28	; 40
	DCMOTOR_SETSPEED(40);
 63c:	ae dd       	rcall	.-1188   	; 0x19a <DCMOTOR_SETSPEED>
 63e:	92 cf       	rjmp	.-220    	; 0x564 <main+0x32>
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	30 e0       	ldi	r19, 0x00	; 0
}else if (readtwo >=0 && read >=0 && readtwo <= 12 && read <= 12){
 644:	a9 01       	movw	r20, r18
 646:	c7 01       	movw	r24, r14
 648:	b6 01       	movw	r22, r12
 64a:	5d d2       	rcall	.+1210   	; 0xb06 <__gesf2>
 64c:	88 23       	and	r24, r24
 64e:	0c f4       	brge	.+2      	; 0x652 <main+0x120>
 650:	68 c0       	rjmp	.+208    	; 0x722 <main+0x1f0>
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	a9 01       	movw	r20, r18
 658:	c3 01       	movw	r24, r6
 65a:	b2 01       	movw	r22, r4
 65c:	54 d2       	rcall	.+1192   	; 0xb06 <__gesf2>
 65e:	88 23       	and	r24, r24
 660:	0c f4       	brge	.+2      	; 0x664 <main+0x132>
 662:	5f c0       	rjmp	.+190    	; 0x722 <main+0x1f0>
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	40 e4       	ldi	r20, 0x40	; 64
 66a:	51 e4       	ldi	r21, 0x41	; 65
 66c:	c7 01       	movw	r24, r14
 66e:	b6 01       	movw	r22, r12
 670:	63 d1       	rcall	.+710    	; 0x938 <__cmpsf2>
 672:	18 16       	cp	r1, r24
 674:	0c f4       	brge	.+2      	; 0x678 <main+0x146>
 676:	55 c0       	rjmp	.+170    	; 0x722 <main+0x1f0>
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	40 e4       	ldi	r20, 0x40	; 64
 67e:	51 e4       	ldi	r21, 0x41	; 65
 680:	c3 01       	movw	r24, r6
 682:	b2 01       	movw	r22, r4
 684:	59 d1       	rcall	.+690    	; 0x938 <__cmpsf2>
 686:	18 16       	cp	r1, r24
 688:	0c f4       	brge	.+2      	; 0x68c <main+0x15a>
 68a:	4b c0       	rjmp	.+150    	; 0x722 <main+0x1f0>
 68c:	8f dd       	rcall	.-1250   	; 0x1ac <DCMOTOR_Stop>
	DCMOTOR_Stop();
 68e:	81 e0       	ldi	r24, 0x01	; 1
	DCMOTOR_SEtDIR(DIR_ANTI_CLOCK_WISE);
 690:	7f dd       	rcall	.-1282   	; 0x190 <DCMOTOR_SEtDIR>
 692:	8a dd       	rcall	.-1260   	; 0x1a8 <DCMOTOR_Start>
 694:	88 e2       	ldi	r24, 0x28	; 40
	DCMOTOR_Start();
 696:	81 dd       	rcall	.-1278   	; 0x19a <DCMOTOR_SETSPEED>
 698:	8f ec       	ldi	r24, 0xCF	; 207
	DCMOTOR_SETSPEED(40);
 69a:	97 e0       	ldi	r25, 0x07	; 7
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <main+0x16a>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x170>
 6a2:	00 00       	nop
 6a4:	83 dd       	rcall	.-1274   	; 0x1ac <DCMOTOR_Stop>
	_delay_us(500);
	DCMOTOR_Stop();
 6a6:	c0 90 f6 00 	lds	r12, 0x00F6	; 0x8000f6 <read>
	if(read >=0 && read <= 12){
 6aa:	d0 90 f7 00 	lds	r13, 0x00F7	; 0x8000f7 <read+0x1>
 6ae:	e0 90 f8 00 	lds	r14, 0x00F8	; 0x8000f8 <read+0x2>
 6b2:	f0 90 f9 00 	lds	r15, 0x00F9	; 0x8000f9 <read+0x3>
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	a9 01       	movw	r20, r18
 6bc:	c7 01       	movw	r24, r14
 6be:	b6 01       	movw	r22, r12
 6c0:	22 d2       	rcall	.+1092   	; 0xb06 <__gesf2>
 6c2:	88 23       	and	r24, r24
 6c4:	74 f0       	brlt	.+28     	; 0x6e2 <main+0x1b0>
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	40 e4       	ldi	r20, 0x40	; 64
 6cc:	51 e4       	ldi	r21, 0x41	; 65
 6ce:	c7 01       	movw	r24, r14
 6d0:	b6 01       	movw	r22, r12
 6d2:	32 d1       	rcall	.+612    	; 0x938 <__cmpsf2>
 6d4:	18 16       	cp	r1, r24
 6d6:	2c f0       	brlt	.+10     	; 0x6e2 <main+0x1b0>
 6d8:	6e dd       	rcall	.-1316   	; 0x1b6 <DCMOTOR_RIGHT>
 6da:	66 dd       	rcall	.-1332   	; 0x1a8 <DCMOTOR_Start>
	DCMOTOR_RIGHT();
 6dc:	88 e2       	ldi	r24, 0x28	; 40
	DCMOTOR_Start();
 6de:	5d dd       	rcall	.-1350   	; 0x19a <DCMOTOR_SETSPEED>
	DCMOTOR_SETSPEED(40);
 6e0:	41 cf       	rjmp	.-382    	; 0x564 <main+0x32>
 6e2:	c0 90 f2 00 	lds	r12, 0x00F2	; 0x8000f2 <__data_end>
	}else if (readtwo >=0 && readtwo <= 12){
 6e6:	d0 90 f3 00 	lds	r13, 0x00F3	; 0x8000f3 <__data_end+0x1>
 6ea:	e0 90 f4 00 	lds	r14, 0x00F4	; 0x8000f4 <__data_end+0x2>
 6ee:	f0 90 f5 00 	lds	r15, 0x00F5	; 0x8000f5 <__data_end+0x3>
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	a9 01       	movw	r20, r18
 6f8:	c7 01       	movw	r24, r14
 6fa:	b6 01       	movw	r22, r12
 6fc:	04 d2       	rcall	.+1032   	; 0xb06 <__gesf2>
 6fe:	88 23       	and	r24, r24
 700:	0c f4       	brge	.+2      	; 0x704 <main+0x1d2>
 702:	30 cf       	rjmp	.-416    	; 0x564 <main+0x32>
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	40 e4       	ldi	r20, 0x40	; 64
 70a:	51 e4       	ldi	r21, 0x41	; 65
 70c:	c7 01       	movw	r24, r14
 70e:	b6 01       	movw	r22, r12
 710:	13 d1       	rcall	.+550    	; 0x938 <__cmpsf2>
 712:	18 16       	cp	r1, r24
 714:	0c f4       	brge	.+2      	; 0x718 <main+0x1e6>
 716:	26 cf       	rjmp	.-436    	; 0x564 <main+0x32>
 718:	51 dd       	rcall	.-1374   	; 0x1bc <DCMOTOR_LEFT>
 71a:	46 dd       	rcall	.-1396   	; 0x1a8 <DCMOTOR_Start>
	DCMOTOR_LEFT();
 71c:	88 e2       	ldi	r24, 0x28	; 40
 71e:	3d dd       	rcall	.-1414   	; 0x19a <DCMOTOR_SETSPEED>
	 DCMOTOR_Start();
 720:	21 cf       	rjmp	.-446    	; 0x564 <main+0x32>
 722:	80 e0       	ldi	r24, 0x00	; 0
	 DCMOTOR_SETSPEED(40);
 724:	35 dd       	rcall	.-1430   	; 0x190 <DCMOTOR_SEtDIR>
 726:	40 dd       	rcall	.-1408   	; 0x1a8 <DCMOTOR_Start>
 728:	88 e2       	ldi	r24, 0x28	; 40
 72a:	37 dd       	rcall	.-1426   	; 0x19a <DCMOTOR_SETSPEED>
    }
	
}else{
	DCMOTOR_SEtDIR(DIR_CLOCK_WISE);
 72c:	1b cf       	rjmp	.-458    	; 0x564 <main+0x32>

0000072e <SETCALLBACK_TIMER0_OVR>:
 72e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <p2f+0x1>
	DCMOTOR_Start();
 732:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <p2f>
	DCMOTOR_SETSPEED(40);
 736:	08 95       	ret

00000738 <timer_init>:
 738:	12 be       	out	0x32, r1	; 50
 73a:	83 b7       	in	r24, 0x33	; 51
 73c:	8f 7b       	andi	r24, 0xBF	; 191
////////////
void timer1_init (void){
	SET_BiT(TIM_TIMSK,TIM_TOIE1);
	//SET_BiT(TIM_TIFR,TIM_ICF1);
	//SET_BiT(TIM_TIFR,TIM_TOV1);
	SET_BiT(TCCR1B,CS12);
 73e:	83 bf       	out	0x33, r24	; 51
 740:	83 b7       	in	r24, 0x33	; 51
 742:	87 7f       	andi	r24, 0xF7	; 247
 744:	83 bf       	out	0x33, r24	; 51
 746:	83 b7       	in	r24, 0x33	; 51
 748:	88 7f       	andi	r24, 0xF8	; 248
 74a:	81 60       	ori	r24, 0x01	; 1
 74c:	83 bf       	out	0x33, r24	; 51
 74e:	89 b7       	in	r24, 0x39	; 57
 750:	81 60       	ori	r24, 0x01	; 1
 752:	89 bf       	out	0x39, r24	; 57
 754:	89 b7       	in	r24, 0x39	; 57
 756:	8d 7f       	andi	r24, 0xFD	; 253
 758:	89 bf       	out	0x39, r24	; 57
 75a:	08 95       	ret

0000075c <__vector_11>:
 75c:	1f 92       	push	r1
 75e:	0f 92       	push	r0
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	0f 92       	push	r0
 764:	11 24       	eor	r1, r1
 766:	2f 93       	push	r18
 768:	3f 93       	push	r19
 76a:	4f 93       	push	r20
 76c:	5f 93       	push	r21
 76e:	6f 93       	push	r22
 770:	7f 93       	push	r23
 772:	8f 93       	push	r24
 774:	9f 93       	push	r25
 776:	af 93       	push	r26
 778:	bf 93       	push	r27
 77a:	ef 93       	push	r30
 77c:	ff 93       	push	r31
 77e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <p2f>
 782:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <p2f+0x1>
 786:	09 95       	icall
 788:	ff 91       	pop	r31
 78a:	ef 91       	pop	r30
 78c:	bf 91       	pop	r27
 78e:	af 91       	pop	r26
 790:	9f 91       	pop	r25
 792:	8f 91       	pop	r24
 794:	7f 91       	pop	r23
 796:	6f 91       	pop	r22
 798:	5f 91       	pop	r21
 79a:	4f 91       	pop	r20
 79c:	3f 91       	pop	r19
 79e:	2f 91       	pop	r18
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <__vector_10>:
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	4f 93       	push	r20
 7ba:	5f 93       	push	r21
 7bc:	6f 93       	push	r22
 7be:	7f 93       	push	r23
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	af 93       	push	r26
 7c6:	bf 93       	push	r27
 7c8:	ef 93       	push	r30
 7ca:	ff 93       	push	r31
 7cc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <p3f>
 7d0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <p3f+0x1>
 7d4:	09 95       	icall
 7d6:	ff 91       	pop	r31
 7d8:	ef 91       	pop	r30
 7da:	bf 91       	pop	r27
 7dc:	af 91       	pop	r26
 7de:	9f 91       	pop	r25
 7e0:	8f 91       	pop	r24
 7e2:	7f 91       	pop	r23
 7e4:	6f 91       	pop	r22
 7e6:	5f 91       	pop	r21
 7e8:	4f 91       	pop	r20
 7ea:	3f 91       	pop	r19
 7ec:	2f 91       	pop	r18
 7ee:	0f 90       	pop	r0
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	0f 90       	pop	r0
 7f4:	1f 90       	pop	r1
 7f6:	18 95       	reti

000007f8 <PWM0_Init>:
 7f8:	8f b5       	in	r24, 0x2f	; 47
 7fa:	81 6a       	ori	r24, 0xA1	; 161
 7fc:	8f bd       	out	0x2f, r24	; 47
 7fe:	8e b5       	in	r24, 0x2e	; 46
 800:	84 60       	ori	r24, 0x04	; 4
 802:	8e bd       	out	0x2e, r24	; 46
 804:	87 e8       	ldi	r24, 0x87	; 135
 806:	93 e1       	ldi	r25, 0x13	; 19
 808:	97 bd       	out	0x27, r25	; 39
 80a:	86 bd       	out	0x26, r24	; 38
 80c:	08 95       	ret

0000080e <PWM0_GEN>:
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	88 96       	adiw	r24, 0x28	; 40
 812:	99 bd       	out	0x29, r25	; 41
 814:	88 bd       	out	0x28, r24	; 40
 816:	08 95       	ret

00000818 <PWM0_Start>:
 818:	8f b5       	in	r24, 0x2f	; 47
 81a:	81 60       	ori	r24, 0x01	; 1
 81c:	8f bd       	out	0x2f, r24	; 47
 81e:	08 95       	ret

00000820 <__vector_9>:
	//SET_BiT(TCCR1B,CS10);
}
//////
ISR(TIMER1_OVF_vect){
 820:	1f 92       	push	r1
 822:	0f 92       	push	r0
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	0f 92       	push	r0
 828:	11 24       	eor	r1, r1
 82a:	2f 93       	push	r18
 82c:	3f 93       	push	r19
 82e:	4f 93       	push	r20
 830:	5f 93       	push	r21
 832:	6f 93       	push	r22
 834:	7f 93       	push	r23
 836:	8f 93       	push	r24
 838:	9f 93       	push	r25
 83a:	af 93       	push	r26
 83c:	bf 93       	push	r27
 83e:	ef 93       	push	r30
 840:	ff 93       	push	r31
	p4f();
 842:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <p4f>
 846:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <p4f+0x1>
 84a:	09 95       	icall
 84c:	ff 91       	pop	r31
 84e:	ef 91       	pop	r30
 850:	bf 91       	pop	r27
 852:	af 91       	pop	r26
 854:	9f 91       	pop	r25
 856:	8f 91       	pop	r24
 858:	7f 91       	pop	r23
 85a:	6f 91       	pop	r22
 85c:	5f 91       	pop	r21
 85e:	4f 91       	pop	r20
 860:	3f 91       	pop	r19
 862:	2f 91       	pop	r18
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <__subsf3>:
 86e:	50 58       	subi	r21, 0x80	; 128

00000870 <__addsf3>:
 870:	bb 27       	eor	r27, r27
 872:	aa 27       	eor	r26, r26
 874:	0e d0       	rcall	.+28     	; 0x892 <__addsf3x>
 876:	0d c1       	rjmp	.+538    	; 0xa92 <__fp_round>
 878:	fe d0       	rcall	.+508    	; 0xa76 <__fp_pscA>
 87a:	30 f0       	brcs	.+12     	; 0x888 <__addsf3+0x18>
 87c:	03 d1       	rcall	.+518    	; 0xa84 <__fp_pscB>
 87e:	20 f0       	brcs	.+8      	; 0x888 <__addsf3+0x18>
 880:	31 f4       	brne	.+12     	; 0x88e <__addsf3+0x1e>
 882:	9f 3f       	cpi	r25, 0xFF	; 255
 884:	11 f4       	brne	.+4      	; 0x88a <__addsf3+0x1a>
 886:	1e f4       	brtc	.+6      	; 0x88e <__addsf3+0x1e>
 888:	f3 c0       	rjmp	.+486    	; 0xa70 <__fp_nan>
 88a:	0e f4       	brtc	.+2      	; 0x88e <__addsf3+0x1e>
 88c:	e0 95       	com	r30
 88e:	e7 fb       	bst	r30, 7
 890:	e9 c0       	rjmp	.+466    	; 0xa64 <__fp_inf>

00000892 <__addsf3x>:
 892:	e9 2f       	mov	r30, r25
 894:	0f d1       	rcall	.+542    	; 0xab4 <__fp_split3>
 896:	80 f3       	brcs	.-32     	; 0x878 <__addsf3+0x8>
 898:	ba 17       	cp	r27, r26
 89a:	62 07       	cpc	r22, r18
 89c:	73 07       	cpc	r23, r19
 89e:	84 07       	cpc	r24, r20
 8a0:	95 07       	cpc	r25, r21
 8a2:	18 f0       	brcs	.+6      	; 0x8aa <__addsf3x+0x18>
 8a4:	71 f4       	brne	.+28     	; 0x8c2 <__addsf3x+0x30>
 8a6:	9e f5       	brtc	.+102    	; 0x90e <__addsf3x+0x7c>
 8a8:	27 c1       	rjmp	.+590    	; 0xaf8 <__fp_zero>
 8aa:	0e f4       	brtc	.+2      	; 0x8ae <__addsf3x+0x1c>
 8ac:	e0 95       	com	r30
 8ae:	0b 2e       	mov	r0, r27
 8b0:	ba 2f       	mov	r27, r26
 8b2:	a0 2d       	mov	r26, r0
 8b4:	0b 01       	movw	r0, r22
 8b6:	b9 01       	movw	r22, r18
 8b8:	90 01       	movw	r18, r0
 8ba:	0c 01       	movw	r0, r24
 8bc:	ca 01       	movw	r24, r20
 8be:	a0 01       	movw	r20, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	ff 27       	eor	r31, r31
 8c4:	59 1b       	sub	r21, r25
 8c6:	99 f0       	breq	.+38     	; 0x8ee <__addsf3x+0x5c>
 8c8:	59 3f       	cpi	r21, 0xF9	; 249
 8ca:	50 f4       	brcc	.+20     	; 0x8e0 <__addsf3x+0x4e>
 8cc:	50 3e       	cpi	r21, 0xE0	; 224
 8ce:	68 f1       	brcs	.+90     	; 0x92a <__addsf3x+0x98>
 8d0:	1a 16       	cp	r1, r26
 8d2:	f0 40       	sbci	r31, 0x00	; 0
 8d4:	a2 2f       	mov	r26, r18
 8d6:	23 2f       	mov	r18, r19
 8d8:	34 2f       	mov	r19, r20
 8da:	44 27       	eor	r20, r20
 8dc:	58 5f       	subi	r21, 0xF8	; 248
 8de:	f3 cf       	rjmp	.-26     	; 0x8c6 <__addsf3x+0x34>
 8e0:	46 95       	lsr	r20
 8e2:	37 95       	ror	r19
 8e4:	27 95       	ror	r18
 8e6:	a7 95       	ror	r26
 8e8:	f0 40       	sbci	r31, 0x00	; 0
 8ea:	53 95       	inc	r21
 8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__addsf3x+0x4e>
 8ee:	7e f4       	brtc	.+30     	; 0x90e <__addsf3x+0x7c>
 8f0:	1f 16       	cp	r1, r31
 8f2:	ba 0b       	sbc	r27, r26
 8f4:	62 0b       	sbc	r22, r18
 8f6:	73 0b       	sbc	r23, r19
 8f8:	84 0b       	sbc	r24, r20
 8fa:	ba f0       	brmi	.+46     	; 0x92a <__addsf3x+0x98>
 8fc:	91 50       	subi	r25, 0x01	; 1
 8fe:	a1 f0       	breq	.+40     	; 0x928 <__addsf3x+0x96>
 900:	ff 0f       	add	r31, r31
 902:	bb 1f       	adc	r27, r27
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	c2 f7       	brpl	.-16     	; 0x8fc <__addsf3x+0x6a>
 90c:	0e c0       	rjmp	.+28     	; 0x92a <__addsf3x+0x98>
 90e:	ba 0f       	add	r27, r26
 910:	62 1f       	adc	r22, r18
 912:	73 1f       	adc	r23, r19
 914:	84 1f       	adc	r24, r20
 916:	48 f4       	brcc	.+18     	; 0x92a <__addsf3x+0x98>
 918:	87 95       	ror	r24
 91a:	77 95       	ror	r23
 91c:	67 95       	ror	r22
 91e:	b7 95       	ror	r27
 920:	f7 95       	ror	r31
 922:	9e 3f       	cpi	r25, 0xFE	; 254
 924:	08 f0       	brcs	.+2      	; 0x928 <__addsf3x+0x96>
 926:	b3 cf       	rjmp	.-154    	; 0x88e <__addsf3+0x1e>
 928:	93 95       	inc	r25
 92a:	88 0f       	add	r24, r24
 92c:	08 f0       	brcs	.+2      	; 0x930 <__addsf3x+0x9e>
 92e:	99 27       	eor	r25, r25
 930:	ee 0f       	add	r30, r30
 932:	97 95       	ror	r25
 934:	87 95       	ror	r24
 936:	08 95       	ret

00000938 <__cmpsf2>:
 938:	71 d0       	rcall	.+226    	; 0xa1c <__fp_cmp>
 93a:	08 f4       	brcc	.+2      	; 0x93e <__cmpsf2+0x6>
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	08 95       	ret

00000940 <__fixsfsi>:
 940:	04 d0       	rcall	.+8      	; 0x94a <__fixunssfsi>
 942:	68 94       	set
 944:	b1 11       	cpse	r27, r1
 946:	d9 c0       	rjmp	.+434    	; 0xafa <__fp_szero>
 948:	08 95       	ret

0000094a <__fixunssfsi>:
 94a:	bc d0       	rcall	.+376    	; 0xac4 <__fp_splitA>
 94c:	88 f0       	brcs	.+34     	; 0x970 <__fixunssfsi+0x26>
 94e:	9f 57       	subi	r25, 0x7F	; 127
 950:	90 f0       	brcs	.+36     	; 0x976 <__fixunssfsi+0x2c>
 952:	b9 2f       	mov	r27, r25
 954:	99 27       	eor	r25, r25
 956:	b7 51       	subi	r27, 0x17	; 23
 958:	a0 f0       	brcs	.+40     	; 0x982 <__fixunssfsi+0x38>
 95a:	d1 f0       	breq	.+52     	; 0x990 <__fixunssfsi+0x46>
 95c:	66 0f       	add	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	88 1f       	adc	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	1a f0       	brmi	.+6      	; 0x96c <__fixunssfsi+0x22>
 966:	ba 95       	dec	r27
 968:	c9 f7       	brne	.-14     	; 0x95c <__fixunssfsi+0x12>
 96a:	12 c0       	rjmp	.+36     	; 0x990 <__fixunssfsi+0x46>
 96c:	b1 30       	cpi	r27, 0x01	; 1
 96e:	81 f0       	breq	.+32     	; 0x990 <__fixunssfsi+0x46>
 970:	c3 d0       	rcall	.+390    	; 0xaf8 <__fp_zero>
 972:	b1 e0       	ldi	r27, 0x01	; 1
 974:	08 95       	ret
 976:	c0 c0       	rjmp	.+384    	; 0xaf8 <__fp_zero>
 978:	67 2f       	mov	r22, r23
 97a:	78 2f       	mov	r23, r24
 97c:	88 27       	eor	r24, r24
 97e:	b8 5f       	subi	r27, 0xF8	; 248
 980:	39 f0       	breq	.+14     	; 0x990 <__fixunssfsi+0x46>
 982:	b9 3f       	cpi	r27, 0xF9	; 249
 984:	cc f3       	brlt	.-14     	; 0x978 <__fixunssfsi+0x2e>
 986:	86 95       	lsr	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	b3 95       	inc	r27
 98e:	d9 f7       	brne	.-10     	; 0x986 <__fixunssfsi+0x3c>
 990:	3e f4       	brtc	.+14     	; 0x9a0 <__fixunssfsi+0x56>
 992:	90 95       	com	r25
 994:	80 95       	com	r24
 996:	70 95       	com	r23
 998:	61 95       	neg	r22
 99a:	7f 4f       	sbci	r23, 0xFF	; 255
 99c:	8f 4f       	sbci	r24, 0xFF	; 255
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	08 95       	ret

000009a2 <__floatunsisf>:
 9a2:	e8 94       	clt
 9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <__floatsisf+0x12>

000009a6 <__floatsisf>:
 9a6:	97 fb       	bst	r25, 7
 9a8:	3e f4       	brtc	.+14     	; 0x9b8 <__floatsisf+0x12>
 9aa:	90 95       	com	r25
 9ac:	80 95       	com	r24
 9ae:	70 95       	com	r23
 9b0:	61 95       	neg	r22
 9b2:	7f 4f       	sbci	r23, 0xFF	; 255
 9b4:	8f 4f       	sbci	r24, 0xFF	; 255
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	99 23       	and	r25, r25
 9ba:	a9 f0       	breq	.+42     	; 0x9e6 <__floatsisf+0x40>
 9bc:	f9 2f       	mov	r31, r25
 9be:	96 e9       	ldi	r25, 0x96	; 150
 9c0:	bb 27       	eor	r27, r27
 9c2:	93 95       	inc	r25
 9c4:	f6 95       	lsr	r31
 9c6:	87 95       	ror	r24
 9c8:	77 95       	ror	r23
 9ca:	67 95       	ror	r22
 9cc:	b7 95       	ror	r27
 9ce:	f1 11       	cpse	r31, r1
 9d0:	f8 cf       	rjmp	.-16     	; 0x9c2 <__floatsisf+0x1c>
 9d2:	fa f4       	brpl	.+62     	; 0xa12 <__floatsisf+0x6c>
 9d4:	bb 0f       	add	r27, r27
 9d6:	11 f4       	brne	.+4      	; 0x9dc <__floatsisf+0x36>
 9d8:	60 ff       	sbrs	r22, 0
 9da:	1b c0       	rjmp	.+54     	; 0xa12 <__floatsisf+0x6c>
 9dc:	6f 5f       	subi	r22, 0xFF	; 255
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	16 c0       	rjmp	.+44     	; 0xa12 <__floatsisf+0x6c>
 9e6:	88 23       	and	r24, r24
 9e8:	11 f0       	breq	.+4      	; 0x9ee <__floatsisf+0x48>
 9ea:	96 e9       	ldi	r25, 0x96	; 150
 9ec:	11 c0       	rjmp	.+34     	; 0xa10 <__floatsisf+0x6a>
 9ee:	77 23       	and	r23, r23
 9f0:	21 f0       	breq	.+8      	; 0x9fa <__floatsisf+0x54>
 9f2:	9e e8       	ldi	r25, 0x8E	; 142
 9f4:	87 2f       	mov	r24, r23
 9f6:	76 2f       	mov	r23, r22
 9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__floatsisf+0x5e>
 9fa:	66 23       	and	r22, r22
 9fc:	71 f0       	breq	.+28     	; 0xa1a <__floatsisf+0x74>
 9fe:	96 e8       	ldi	r25, 0x86	; 134
 a00:	86 2f       	mov	r24, r22
 a02:	70 e0       	ldi	r23, 0x00	; 0
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	2a f0       	brmi	.+10     	; 0xa12 <__floatsisf+0x6c>
 a08:	9a 95       	dec	r25
 a0a:	66 0f       	add	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	da f7       	brpl	.-10     	; 0xa08 <__floatsisf+0x62>
 a12:	88 0f       	add	r24, r24
 a14:	96 95       	lsr	r25
 a16:	87 95       	ror	r24
 a18:	97 f9       	bld	r25, 7
 a1a:	08 95       	ret

00000a1c <__fp_cmp>:
 a1c:	99 0f       	add	r25, r25
 a1e:	00 08       	sbc	r0, r0
 a20:	55 0f       	add	r21, r21
 a22:	aa 0b       	sbc	r26, r26
 a24:	e0 e8       	ldi	r30, 0x80	; 128
 a26:	fe ef       	ldi	r31, 0xFE	; 254
 a28:	16 16       	cp	r1, r22
 a2a:	17 06       	cpc	r1, r23
 a2c:	e8 07       	cpc	r30, r24
 a2e:	f9 07       	cpc	r31, r25
 a30:	c0 f0       	brcs	.+48     	; 0xa62 <__fp_cmp+0x46>
 a32:	12 16       	cp	r1, r18
 a34:	13 06       	cpc	r1, r19
 a36:	e4 07       	cpc	r30, r20
 a38:	f5 07       	cpc	r31, r21
 a3a:	98 f0       	brcs	.+38     	; 0xa62 <__fp_cmp+0x46>
 a3c:	62 1b       	sub	r22, r18
 a3e:	73 0b       	sbc	r23, r19
 a40:	84 0b       	sbc	r24, r20
 a42:	95 0b       	sbc	r25, r21
 a44:	39 f4       	brne	.+14     	; 0xa54 <__fp_cmp+0x38>
 a46:	0a 26       	eor	r0, r26
 a48:	61 f0       	breq	.+24     	; 0xa62 <__fp_cmp+0x46>
 a4a:	23 2b       	or	r18, r19
 a4c:	24 2b       	or	r18, r20
 a4e:	25 2b       	or	r18, r21
 a50:	21 f4       	brne	.+8      	; 0xa5a <__fp_cmp+0x3e>
 a52:	08 95       	ret
 a54:	0a 26       	eor	r0, r26
 a56:	09 f4       	brne	.+2      	; 0xa5a <__fp_cmp+0x3e>
 a58:	a1 40       	sbci	r26, 0x01	; 1
 a5a:	a6 95       	lsr	r26
 a5c:	8f ef       	ldi	r24, 0xFF	; 255
 a5e:	81 1d       	adc	r24, r1
 a60:	81 1d       	adc	r24, r1
 a62:	08 95       	ret

00000a64 <__fp_inf>:
 a64:	97 f9       	bld	r25, 7
 a66:	9f 67       	ori	r25, 0x7F	; 127
 a68:	80 e8       	ldi	r24, 0x80	; 128
 a6a:	70 e0       	ldi	r23, 0x00	; 0
 a6c:	60 e0       	ldi	r22, 0x00	; 0
 a6e:	08 95       	ret

00000a70 <__fp_nan>:
 a70:	9f ef       	ldi	r25, 0xFF	; 255
 a72:	80 ec       	ldi	r24, 0xC0	; 192
 a74:	08 95       	ret

00000a76 <__fp_pscA>:
 a76:	00 24       	eor	r0, r0
 a78:	0a 94       	dec	r0
 a7a:	16 16       	cp	r1, r22
 a7c:	17 06       	cpc	r1, r23
 a7e:	18 06       	cpc	r1, r24
 a80:	09 06       	cpc	r0, r25
 a82:	08 95       	ret

00000a84 <__fp_pscB>:
 a84:	00 24       	eor	r0, r0
 a86:	0a 94       	dec	r0
 a88:	12 16       	cp	r1, r18
 a8a:	13 06       	cpc	r1, r19
 a8c:	14 06       	cpc	r1, r20
 a8e:	05 06       	cpc	r0, r21
 a90:	08 95       	ret

00000a92 <__fp_round>:
 a92:	09 2e       	mov	r0, r25
 a94:	03 94       	inc	r0
 a96:	00 0c       	add	r0, r0
 a98:	11 f4       	brne	.+4      	; 0xa9e <__fp_round+0xc>
 a9a:	88 23       	and	r24, r24
 a9c:	52 f0       	brmi	.+20     	; 0xab2 <__fp_round+0x20>
 a9e:	bb 0f       	add	r27, r27
 aa0:	40 f4       	brcc	.+16     	; 0xab2 <__fp_round+0x20>
 aa2:	bf 2b       	or	r27, r31
 aa4:	11 f4       	brne	.+4      	; 0xaaa <__fp_round+0x18>
 aa6:	60 ff       	sbrs	r22, 0
 aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__fp_round+0x20>
 aaa:	6f 5f       	subi	r22, 0xFF	; 255
 aac:	7f 4f       	sbci	r23, 0xFF	; 255
 aae:	8f 4f       	sbci	r24, 0xFF	; 255
 ab0:	9f 4f       	sbci	r25, 0xFF	; 255
 ab2:	08 95       	ret

00000ab4 <__fp_split3>:
 ab4:	57 fd       	sbrc	r21, 7
 ab6:	90 58       	subi	r25, 0x80	; 128
 ab8:	44 0f       	add	r20, r20
 aba:	55 1f       	adc	r21, r21
 abc:	59 f0       	breq	.+22     	; 0xad4 <__fp_splitA+0x10>
 abe:	5f 3f       	cpi	r21, 0xFF	; 255
 ac0:	71 f0       	breq	.+28     	; 0xade <__fp_splitA+0x1a>
 ac2:	47 95       	ror	r20

00000ac4 <__fp_splitA>:
 ac4:	88 0f       	add	r24, r24
 ac6:	97 fb       	bst	r25, 7
 ac8:	99 1f       	adc	r25, r25
 aca:	61 f0       	breq	.+24     	; 0xae4 <__fp_splitA+0x20>
 acc:	9f 3f       	cpi	r25, 0xFF	; 255
 ace:	79 f0       	breq	.+30     	; 0xaee <__fp_splitA+0x2a>
 ad0:	87 95       	ror	r24
 ad2:	08 95       	ret
 ad4:	12 16       	cp	r1, r18
 ad6:	13 06       	cpc	r1, r19
 ad8:	14 06       	cpc	r1, r20
 ada:	55 1f       	adc	r21, r21
 adc:	f2 cf       	rjmp	.-28     	; 0xac2 <__fp_split3+0xe>
 ade:	46 95       	lsr	r20
 ae0:	f1 df       	rcall	.-30     	; 0xac4 <__fp_splitA>
 ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <__fp_splitA+0x30>
 ae4:	16 16       	cp	r1, r22
 ae6:	17 06       	cpc	r1, r23
 ae8:	18 06       	cpc	r1, r24
 aea:	99 1f       	adc	r25, r25
 aec:	f1 cf       	rjmp	.-30     	; 0xad0 <__fp_splitA+0xc>
 aee:	86 95       	lsr	r24
 af0:	71 05       	cpc	r23, r1
 af2:	61 05       	cpc	r22, r1
 af4:	08 94       	sec
 af6:	08 95       	ret

00000af8 <__fp_zero>:
 af8:	e8 94       	clt

00000afa <__fp_szero>:
 afa:	bb 27       	eor	r27, r27
 afc:	66 27       	eor	r22, r22
 afe:	77 27       	eor	r23, r23
 b00:	cb 01       	movw	r24, r22
 b02:	97 f9       	bld	r25, 7
 b04:	08 95       	ret

00000b06 <__gesf2>:
 b06:	8a df       	rcall	.-236    	; 0xa1c <__fp_cmp>
 b08:	08 f4       	brcc	.+2      	; 0xb0c <__gesf2+0x6>
 b0a:	8f ef       	ldi	r24, 0xFF	; 255
 b0c:	08 95       	ret

00000b0e <__divmodhi4>:
 b0e:	97 fb       	bst	r25, 7
 b10:	07 2e       	mov	r0, r23
 b12:	16 f4       	brtc	.+4      	; 0xb18 <__divmodhi4+0xa>
 b14:	00 94       	com	r0
 b16:	06 d0       	rcall	.+12     	; 0xb24 <__divmodhi4_neg1>
 b18:	77 fd       	sbrc	r23, 7
 b1a:	08 d0       	rcall	.+16     	; 0xb2c <__divmodhi4_neg2>
 b1c:	0b d0       	rcall	.+22     	; 0xb34 <__udivmodhi4>
 b1e:	07 fc       	sbrc	r0, 7
 b20:	05 d0       	rcall	.+10     	; 0xb2c <__divmodhi4_neg2>
 b22:	3e f4       	brtc	.+14     	; 0xb32 <__divmodhi4_exit>

00000b24 <__divmodhi4_neg1>:
 b24:	90 95       	com	r25
 b26:	81 95       	neg	r24
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	08 95       	ret

00000b2c <__divmodhi4_neg2>:
 b2c:	70 95       	com	r23
 b2e:	61 95       	neg	r22
 b30:	7f 4f       	sbci	r23, 0xFF	; 255

00000b32 <__divmodhi4_exit>:
 b32:	08 95       	ret

00000b34 <__udivmodhi4>:
 b34:	aa 1b       	sub	r26, r26
 b36:	bb 1b       	sub	r27, r27
 b38:	51 e1       	ldi	r21, 0x11	; 17
 b3a:	07 c0       	rjmp	.+14     	; 0xb4a <__udivmodhi4_ep>

00000b3c <__udivmodhi4_loop>:
 b3c:	aa 1f       	adc	r26, r26
 b3e:	bb 1f       	adc	r27, r27
 b40:	a6 17       	cp	r26, r22
 b42:	b7 07       	cpc	r27, r23
 b44:	10 f0       	brcs	.+4      	; 0xb4a <__udivmodhi4_ep>
 b46:	a6 1b       	sub	r26, r22
 b48:	b7 0b       	sbc	r27, r23

00000b4a <__udivmodhi4_ep>:
 b4a:	88 1f       	adc	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	5a 95       	dec	r21
 b50:	a9 f7       	brne	.-22     	; 0xb3c <__udivmodhi4_loop>
 b52:	80 95       	com	r24
 b54:	90 95       	com	r25
 b56:	bc 01       	movw	r22, r24
 b58:	cd 01       	movw	r24, r26
 b5a:	08 95       	ret

00000b5c <__itoa_ncheck>:
 b5c:	bb 27       	eor	r27, r27
 b5e:	4a 30       	cpi	r20, 0x0A	; 10
 b60:	31 f4       	brne	.+12     	; 0xb6e <__itoa_ncheck+0x12>
 b62:	99 23       	and	r25, r25
 b64:	22 f4       	brpl	.+8      	; 0xb6e <__itoa_ncheck+0x12>
 b66:	bd e2       	ldi	r27, 0x2D	; 45
 b68:	90 95       	com	r25
 b6a:	81 95       	neg	r24
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	01 c0       	rjmp	.+2      	; 0xb72 <__utoa_common>

00000b70 <__utoa_ncheck>:
 b70:	bb 27       	eor	r27, r27

00000b72 <__utoa_common>:
 b72:	fb 01       	movw	r30, r22
 b74:	55 27       	eor	r21, r21
 b76:	aa 27       	eor	r26, r26
 b78:	88 0f       	add	r24, r24
 b7a:	99 1f       	adc	r25, r25
 b7c:	aa 1f       	adc	r26, r26
 b7e:	a4 17       	cp	r26, r20
 b80:	10 f0       	brcs	.+4      	; 0xb86 <__utoa_common+0x14>
 b82:	a4 1b       	sub	r26, r20
 b84:	83 95       	inc	r24
 b86:	50 51       	subi	r21, 0x10	; 16
 b88:	b9 f7       	brne	.-18     	; 0xb78 <__utoa_common+0x6>
 b8a:	a0 5d       	subi	r26, 0xD0	; 208
 b8c:	aa 33       	cpi	r26, 0x3A	; 58
 b8e:	08 f0       	brcs	.+2      	; 0xb92 <__utoa_common+0x20>
 b90:	a9 5d       	subi	r26, 0xD9	; 217
 b92:	a1 93       	st	Z+, r26
 b94:	00 97       	sbiw	r24, 0x00	; 0
 b96:	79 f7       	brne	.-34     	; 0xb76 <__utoa_common+0x4>
 b98:	b1 11       	cpse	r27, r1
 b9a:	b1 93       	st	Z+, r27
 b9c:	11 92       	st	Z+, r1
 b9e:	cb 01       	movw	r24, r22
 ba0:	00 c0       	rjmp	.+0      	; 0xba2 <strrev>

00000ba2 <strrev>:
 ba2:	dc 01       	movw	r26, r24
 ba4:	fc 01       	movw	r30, r24
 ba6:	67 2f       	mov	r22, r23
 ba8:	71 91       	ld	r23, Z+
 baa:	77 23       	and	r23, r23
 bac:	e1 f7       	brne	.-8      	; 0xba6 <strrev+0x4>
 bae:	32 97       	sbiw	r30, 0x02	; 2
 bb0:	04 c0       	rjmp	.+8      	; 0xbba <strrev+0x18>
 bb2:	7c 91       	ld	r23, X
 bb4:	6d 93       	st	X+, r22
 bb6:	70 83       	st	Z, r23
 bb8:	62 91       	ld	r22, -Z
 bba:	ae 17       	cp	r26, r30
 bbc:	bf 07       	cpc	r27, r31
 bbe:	c8 f3       	brcs	.-14     	; 0xbb2 <strrev+0x10>
 bc0:	08 95       	ret

00000bc2 <_exit>:
 bc2:	f8 94       	cli

00000bc4 <__stop_program>:
 bc4:	ff cf       	rjmp	.-2      	; 0xbc4 <__stop_program>
